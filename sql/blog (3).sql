-- phpMyAdmin SQL Dump
-- version 4.5.1
-- http://www.phpmyadmin.net
--
-- Host: 127.0.0.1
-- Generation Time: 2018-01-23 05:03:42
-- 服务器版本： 10.1.19-MariaDB
-- PHP Version: 5.6.28

SET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO";
SET time_zone = "+00:00";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8mb4 */;

--
-- Database: `blog`
--

-- --------------------------------------------------------

--
-- 表的结构 `article`
--

CREATE TABLE `article` (
  `id` int(11) NOT NULL,
  `name` varchar(255) NOT NULL,
  `description` longtext NOT NULL,
  `content` longtext NOT NULL,
  `time` date NOT NULL,
  `author` varchar(255) NOT NULL,
  `support` int(11) NOT NULL DEFAULT '0',
  `watch` int(11) NOT NULL DEFAULT '0',
  `comment` varchar(255) NOT NULL DEFAULT '0',
  `type` varchar(255) NOT NULL,
  `wordNumber` int(11) NOT NULL DEFAULT '0'
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

--
-- 转存表中的数据 `article`
--

INSERT INTO `article` (`id`, `name`, `description`, `content`, `time`, `author`, `support`, `watch`, `comment`, `type`, `wordNumber`) VALUES
(1, '在大学，请尊重每一个人的努力成果，因为我们都很脆弱', '不知道你身边有没有这样的人，需要你的时候就拼命对你好，不需要你的时候就当做不认识，你对她做得一切都不曾珍惜，所有都是理所应当。我想讲一个真实的故事，他让我有点心疼。01昨天学校的公众号平台聚会，经常被领导骂不负责任的我，决定早点过去免得又被说不积极。因为不喜欢这样的场合，之前的很多次聚会我都婉拒啦！这次聚会又有很多新面孔我一个也叫不出名字。其中有一个男孩是今天的主厨，对于他的厨艺我多少有些怀疑因为', '<p>不知道你身边有没有这样的人，需要你的时候就拼命对你好，不需要你的时候就当做不认识，你对她做得一切都不曾珍惜，所有都是理所应当。<br/></p><p>我想讲一个真实的故事，他让我有点心疼。</p><h4>01</h4><p>昨天学校的公众号平台聚会，经常被领导骂不负责任的我，决定早点过去免得又被说不积极。</p><p>因为不喜欢这样的场合，之前的很多次聚会我都婉拒啦！这次聚会又有很多新面孔我一个也叫不出名字。</p><p>其中有一个男孩是今天的主厨，对于他的厨艺我多少有些怀疑因为不是随口说说，会查菜谱就叫做大厨。</p><p>他个子不高，大大的眼睛，还有一点小驼背，我出于想吃可乐鸡翅的私心，跟着他一起去了超市做采购人员，当然也不忘记买自己最爱吃的鸡翅。</p><p>他一路跟我讲，要买什么类型的肉，什么调料，印象最深刻的就是他一直在我耳边念叨<strong>“八角在哪里？怎么没有八角”</strong>真的那个时候觉得这个小学弟好像有点专业，起码在我这个门外汉看起来。</p><p>买完菜回来，他就一头扎进了厨房，我偶尔过去帮工，看他大汗淋漓的翻动着炒锅看着确实有那么两把刷子。</p><p>可乐鸡翅做了好久，我看着那个汤料一点点被收进鸡翅里面，飘出那股浓浓的香味，对了这就是我要的可乐鸡翅。我拿着筷子立刻夹了一个，吃了一口我就对这个学弟佩服的五体投地。</p><p>看来真是个厨艺了得的男子，那盘可乐鸡翅端上桌子几分钟就被抢购一空。受欢迎程度可见一斑。</p><p>之后的千叶豆腐，手撕包菜，干煸豆角也都让我们大家吃得不亦乐乎。那一刻觉得有点手艺也真是吃香呀！</p><p>为了纪念我们这一年的工作，领导定了一个超级大的蛋糕，我们围着蛋糕一起照了张照片，在厨房忙碌的学弟，连一口蛋糕都没有吃上。可能大家太过于开心，忘记了一直为我们忙碌的他。</p><p>直到照相的时候，他才被想起来因为清点了人数才被发现他确实被我们忽略啦！他把外套系在腰间，脖子下面汗涔涔的，这样冷的天气能出这些汗可见他在厨房的忙碌。</p><p>拍完照，他匆匆回到厨房，再看见他已经端着一大锅烩菜汤出现在我们面前。其实远远的就听有人在说<strong>“这汤糊了，千万别喝”</strong></p><p>有人打趣的说，怕中毒，有人直接就攀谈起来丝毫不理会，全然没了刚才那般夸赞。他好像看出了其他人的冷漠，自己吃着被剩下的各种菜，默默喝着汤。</p><p>十几个人的菜都是他一个人做，从下午五点一直到晚上十点，没人帮忙，一边听着欢声笑语一边忍受着孤寂。</p><p>我拿过碗，舀了满满一大碗，坐在他对面开心的喝起来。他看着我样子有些羞涩，不好意思的说<strong>“学姐，汤都糊了你别喝啦！”</strong></p><p>我看着他，一碗一碗的喝起来，我知道他的不容易，我也明白的寒心，我能做的就只是喝汤这么简单。</p><p><strong>其实我也经历过这样的事情，好不是你自己的好，如果不好便全都自己背着。</strong></p><p>不是出于同情，我只是单纯的觉得汤真的很好喝，有点像我儿时父亲做的烤地瓜的味道。并不难喝，若不是，为了拍照叫他出来，他怎么会没有及时翻动锅底，糊了整锅。</p><p><img class="" src="//upload-images.jianshu.io/upload_images/3749460-adab4e377b389081.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/700"/>\n &nbsp; &nbsp; &nbsp; &nbsp;</p><p>图片发自简书App</p><p><br/></p><p>他凌晨回到宿舍，发了一条朋友圈，大致内容也不过是明白了好多事和好多人罢了。<strong>那就好像一个哭泣的灵魂，让人有点心疼。</strong></p><p><strong>在大学，不再考成绩标榜是否成功，但我们也没学会用尊重去看待别人的努力，想想确实会受伤害。</strong></p><h4><strong>02</strong></h4><p><img class="" src="//upload-images.jianshu.io/upload_images/3749460-be231e9e136724c5.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/700"/>\n &nbsp; &nbsp; &nbsp; &nbsp;</p><p>图片发自简书App</p><p><br/></p><p>看着如今的学弟，有看到我曾经的影子，傻傻的不懂拒绝也不懂保护自己。<strong>俗话说的好“费力不讨好”大概就是指我们这类人吧！</strong></p><p>去年因为一部十几分钟的微电影有了自己拍摄的冲动，刚好学校有这门选修课，我就立刻报名了。因为课程抢手大家也纷纷抢报，我们一个小组其他人都抱着学技术的心来，又因为学技术太难而逃课，到最后出作业就变成了我一个人的事情，时常要做好多份作业。</p><p>我总是想着多做一点就会进步一点，论私心我也就只有这么一点点。<strong>刘同说过，做其他人分内的事情，你就把它想象成打怪升级，你一直在修炼而其他人在休息。</strong></p><p>就因为这句话，我坚持了整整一个学期，那一个学期我每天都超负荷的做这些作业。有一次实在是太累了漏了一个人的作业，她竟然来质问我，为什么不帮她做，那副嘴脸我永远记得，样子真的太过丑陋，丑陋的让人心寒。</p><p><strong>当你你替别人分担，变成了理所当然，他们就只会蹬鼻子上脸。</strong></p><p>后来组内大作业，要拍一部微电影，大家都提议让我来撰写剧本，以及分镜头脚本，我欣然接受。因为我喜欢，当然我也知道他们想偷懒。这些我不计较，因为我喜欢，我要付出很多让我自己配得上喜欢这两个字。</p><p>剧本没人看，我就给他们一遍一遍讲，分镜头没人看，我就给她们努力解释，自己找演员，自己借机器。</p><p>从开始到结束，一直都是我自己在跟我自己默默努力着。记得交作业那天，当作品展示在大屏幕上的时候，我哭了。不仅仅为我这单打独斗的作品哭泣，还为了我那心里的委屈哭泣。</p><p>作品展出之前，看了几组作品，我旁边的组员跟我说“<strong>我们太失败啦！</strong>”那句话就像刀一样反复割我的肉，其他人低着头不看组内作品，堵着耳朵在桌子下面怪笑，我看着他们眼泪止不住的流。我就看着我人生的第一部微电影，我就要看看它到底有多差。</p><p>老师并没有说哪里不好，这应该是对我最大的安慰了。我确实喜欢电影，也喜欢写剧本，但谁都是第一次，就因为我喜欢就把一切推给我，然后再因为不满意抱怨，<strong>说实话我真的委屈特别委屈。</strong></p><p><img class="" src="//upload-images.jianshu.io/upload_images/3749460-dd76305b3d4bc885.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/700"/>\n &nbsp; &nbsp; &nbsp; &nbsp;</p><p>图片发自简书App</p><p><br/></p><p>那之后，我仍然保留着那份对电影的热忱，但我也并不愿意在他们面前表露。<strong>江山易改本性难移，有时候伤透了心就不愿意继续做任劳任怨的灵魂，因为得不到尊重。</strong></p><p>后来在微电影拍摄上小有成就，曾经一起的组员跟我提起想跟着一起玩。我礼貌的拒绝了，<strong>那一刻我知道我并不善良，因为我没有给她重新开始的机会。</strong></p><h4><strong>03</strong></h4><p>对门寝室的姑娘，假期和我同留在学校，我搞我的电影，她练她的舞蹈。因为一栋楼就我们两个人，互相照顾着亲切了不少。我都同样有那个被汪峰老师提及多次的“<strong>梦想</strong>”</p><p>为了梦想团聚在宿舍的六楼，那时候上楼就一直低着头快步走，生怕看到些什么东西。第一天留在宿舍，害怕的拉着她聊了一整夜的人生。提起我自己的委屈，她也有同样的经历。</p><p>果然我们有些相似，她和我不同，我多少有些内向，她比较外向，也是喜欢组织些人做些东西。久而久之宿舍也都依赖她去做些事情，她加了不少社团，有时候忙的团团转转还得做小组作业。</p><p>最生气的一次便是，她社团忙完回来，想起明天课上发表，她问大家有做吗？三个不回应，两个说没有，所有的东西都指着她去做。</p><p><strong>她说那是她第一次有些委屈的哭了，因为她外向，每次发表都是她来做，她不去做就没有人会站起来。</strong></p><p>她铁了心为自己硬气一次，那天的课上老师念到她们组时，一片死寂没有人发表，就连我都习惯性的看着她。她就低着头，什么也做。</p><p>她告诉我，她还是于心不忍做了所有发表内容，无论谁发言只要完整读出来就可以。即使这样仍然没有人愿意，所以她屏住呼吸，就是不想再屈服。</p><p>后来她们全组以低分飘过及格线，我和她不同的是我没有她这样的勇气。所以我佩服着这样的姑娘。</p><h4>04</h4><p>我们这样的经历很多都是由于自身开始的，有软弱，有豪爽也有些自负吧！觉得什么都是自己很好。</p><p>想起前段时间很火的韩剧《奶酪陷阱》无论它结局怎么样，你都不能否认它真的很真实。洪雪也因为全组作业被埋怨过被打过低分，这样的经历看得我有些感同身受，其实有些人的可恶不能用法律去制裁，但道德上真的很难去不追责。</p><p>像洪雪这样的人还有很多，有时候我们<strong>不需要你有多理解，你只要尊重一下我们的努力成果，就可以让我们继续任劳任怨下去。</strong></p><p>谁都不希望得到让人丧气的抱怨。仅以此文纪念我有些敏感的神经，可能对你们来说不算什么，但我多少有些脆弱。我知道有人说出入社会这样的事情会特别，你难道还能去管教整个社会？确实我做不到，但请看到这篇文章的你，能对为你做些事情的人予以尊重。</p><p>未来我也不知道是什么样子，但我已经做好了心里准备其实也没有那么惧怕啦！不是有句话说<strong>“能说出来的事情都不会再害怕啦！”</strong></p><p>我正在慢慢做到，我再越来越好罢了。</p><p style="text-align:center"><img class="" src="//upload-images.jianshu.io/upload_images/3749460-c2ed7732fbbf8171.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/700"/></p><p>&nbsp; &nbsp; &nbsp; &nbsp;<br/></p><p><br/></p><p><br/></p>', '2017-12-07', 'zackon', 0, 20, '0', 'note', 3124);
INSERT INTO `article` (`id`, `name`, `description`, `content`, `time`, `author`, `support`, `watch`, `comment`, `type`, `wordNumber`) VALUES
(3, '入门Webpack，看这篇就够了', '2017年12月7日更新，添加了clean-webpack-plugin,babel-env-preset,添加本文涉及到的所有代码的示例，如果你在学习过程中出错了，可点击此处参考写在前面的话阅读本文之前，先看下面这个webpack的配置文件，如果每一项你都懂，那本文能带给你的收获也许就比较有限，你可以快速浏览或直接跳过；如果你和十天前的我一样，对很多选项存在着疑惑，那花一段时间慢慢阅读本文，你的', '<blockquote><p>2017年12月7日更新，添加了<code>clean-webpack-plugin</code>,<code>babel-env-preset</code>,添加本文涉及到的所有代码的示例，如果你在学习过程中出错了，可<a href="https://link.jianshu.com?t=https://github.com/zhangwang1990/blogs/tree/master/sources/webpackTest" target="_blank">点击此处参考</a></p></blockquote><h3>写在前面的话</h3><blockquote><p>阅读本文之前，先看下面这个webpack的配置文件，如果每一项你都懂，那本文能带给你的收获也许就比较有限，你可以快速浏览或直接跳过；如果你和十天前的我一样，对很多选项存在着疑惑，那花一段时间慢慢阅读本文，你的疑惑一定一个一个都会消失；如果你以前没怎么接触过Webpack，而你又你对webpack感兴趣，那么动手跟着本文中那个贯穿始终的例子写一次，写完以后你会发现你已明明白白的走进了Webpack的大门。</p></blockquote><pre class="hljs undefined">//&nbsp;一个常见的`webpack`配置文件\nconst&nbsp;webpack&nbsp;=&nbsp;require(&#39;webpack&#39;);\nconst&nbsp;HtmlWebpackPlugin&nbsp;=&nbsp;require(&#39;html-webpack-plugin&#39;);\nconst&nbsp;ExtractTextPlugin&nbsp;=&nbsp;require(&#39;extract-text-webpack-plugin&#39;);\n\nmodule.exports&nbsp;=&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;entry:&nbsp;__dirname&nbsp;+&nbsp;&quot;/app/main.js&quot;,&nbsp;//已多次提及的唯一入口文件\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output:&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;path:&nbsp;__dirname&nbsp;+&nbsp;&quot;/build&quot;,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;filename:&nbsp;&quot;bundle-[hash].js&quot;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;devtool:&nbsp;&#39;none&#39;,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;devServer:&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;contentBase:&nbsp;&quot;./public&quot;,&nbsp;//本地服务器所加载的页面所在的目录\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;historyApiFallback:&nbsp;true,&nbsp;//不跳转\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inline:&nbsp;true,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;hot:&nbsp;true\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;module:&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rules:&nbsp;[{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;test:&nbsp;/(.jsx|.js)$/,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;use:&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;loader:&nbsp;&quot;babel-loader&quot;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;exclude:&nbsp;/node_modules/\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;test:&nbsp;/.css$/,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;use:&nbsp;ExtractTextPlugin.extract({\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fallback:&nbsp;&quot;style-loader&quot;,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;use:&nbsp;[{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;loader:&nbsp;&quot;css-loader&quot;,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;options:&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;modules:&nbsp;true,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;localIdentName:&nbsp;&#39;[name]__[local]--[hash:base64:5]&#39;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;loader:&nbsp;&quot;postcss-loader&quot;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}],\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;})\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;]\n&nbsp;&nbsp;&nbsp;&nbsp;},\n&nbsp;&nbsp;&nbsp;&nbsp;plugins:&nbsp;[\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new&nbsp;webpack.BannerPlugin(&#39;版权所有，翻版必究&#39;),\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new&nbsp;HtmlWebpackPlugin({\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;template:&nbsp;__dirname&nbsp;+&nbsp;&quot;/app/index.tmpl.html&quot;&nbsp;//new&nbsp;一个这个插件的实例，并传入相关的参数\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}),\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new&nbsp;webpack.optimize.OccurrenceOrderPlugin(),\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new&nbsp;webpack.optimize.UglifyJsPlugin(),\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new&nbsp;ExtractTextPlugin(&quot;style.css&quot;)\n&nbsp;&nbsp;&nbsp;&nbsp;]\n};</pre><h3>什么是WebPack，为什么要使用它？</h3><h4>为什要使用WebPack</h4><p>现今的很多网页其实可以看做是功能丰富的应用，它们拥有着复杂的JavaScript代码和一大堆依赖包。为了简化开发的复杂度，前端社区涌现出了很多好的实践方法</p><ul class=" list-paddingleft-2"><li><p><strong>模块化</strong>，让我们可以把复杂的程序细化为小的文件;</p></li><li><p>类似于TypeScript这种在JavaScript基础上拓展的开发语言：使我们能够实现目前版本的JavaScript不能直接使用的特性，并且之后还能转换为JavaScript文件使浏览器可以识别；</p></li><li><p>Scss，less等CSS预处理器</p></li><li><p>...</p></li></ul><p>这些改进确实大大的提高了我们的开发效率，但是利用它们开发的文件往往需要进行额外的处理才能让浏览器识别,而手动处理又是非常繁琐的，这就为WebPack类的工具的出现提供了需求。</p><h4>什么是Webpack</h4><p>WebPack可以看做是<strong>模块打包机</strong>：它做的事情是，分析你的项目结构，找到JavaScript模块以及其它的一些浏览器不能直接运行的拓展语言（Scss，TypeScript等），并将其转换和打包为合适的格式供浏览器使用。</p><h4>WebPack和Grunt以及Gulp相比有什么特性</h4><p>其实Webpack和另外两个并没有太多的可比性，Gulp/Grunt是一种能够优化前端的开发流程的工具，而WebPack是一种模块化的解决方案，不过Webpack的优点使得Webpack在很多场景下可以替代Gulp/Grunt类的工具。</p><p>Grunt和Gulp的工作方式是：在一个配置文件中，指明对某些文件进行类似编译，组合，压缩等任务的具体步骤，工具之后可以自动替你完成这些任务。</p><p><br/></p><p><img class="" src="//upload-images.jianshu.io/upload_images/1031000-d0693c06bb3a00e3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700"/></p><p>Grunt和Gulp的工作流程</p><p>Webpack的工作方式是：把你的项目当做一个整体，通过一个给定的主文件（如：index.js），Webpack将从这个文件开始找到你的项目的所有依赖文件，使用loaders处理它们，最后打包为一个（或多个）浏览器可识别的JavaScript文件。</p><p><br/></p><p><img class="image-loading"/></p><p>Webpack工作方式</p><p>如果实在要把二者进行比较，Webpack的处理速度更快更直接，能打包更多不同类型的文件。</p><h3>开始使用Webpack</h3><p>初步了解了Webpack工作方式后，我们一步步的开始学习使用Webpack。</p><h4>安装</h4><p>Webpack可以使用npm安装，新建一个空的练习文件夹（此处命名为webpack sample project），在终端中转到该文件夹后执行下述指令就可以完成安装。</p><pre class="hljs undefined">//全局安装\nnpm&nbsp;install&nbsp;-g&nbsp;webpack\n//安装到你的项目目录\nnpm&nbsp;install&nbsp;--save-dev&nbsp;webpack</pre><h4>正式使用Webpack前的准备</h4><ol class=" list-paddingleft-2"><li><p>在上述练习文件夹中创建一个package.json文件，这是一个标准的npm说明文件，里面蕴含了丰富的信息，包括当前项目的依赖模块，自定义的脚本任务等等。在终端中使用<code>npm init</code>命令可以自动创建这个package.json文件</p></li></ol><pre class="hljs undefined">npm&nbsp;init</pre><p>输入这个命令后，终端会问你一系列诸如项目名称，项目描述，作者等信息，不过不用担心，如果你不准备在npm中发布你的模块，这些问题的答案都不重要，回车默认即可。</p><ol class=" list-paddingleft-2"><li><p>package.json文件已经就绪，我们在本项目中安装Webpack作为依赖包</p></li></ol><pre class="hljs undefined">//&nbsp;安装Webpack\nnpm&nbsp;install&nbsp;--save-dev&nbsp;webpack</pre><ol class=" list-paddingleft-2"><li><p>回到之前的空文件夹，并在里面创建两个文件夹,app文件夹和public文件夹，app文件夹用来存放原始数据和我们将写的JavaScript模块，public文件夹用来存放之后供浏览器读取的文件（包括使用webpack打包生成的js文件以及一个<code>index.html</code>文件）。接下来我们再创建三个文件:</p></li></ol><ul class=" list-paddingleft-2"><li><p><code>index.html</code> --放在public文件夹中;</p></li><li><p><code>Greeter.js</code>-- 放在app文件夹中;</p></li><li><p><code>main.js</code>-- 放在app文件夹中;</p></li></ul><p>此时项目结构如下图所示</p><p><br/></p><p><img class="image-loading"/></p><p>项目结构</p><p>我们在<strong>index.html</strong>文件中写入最基础的html代码，它在这里目的在于引入打包后的js文件（这里我们先把之后打包后的js文件命名为<code>bundle.js</code>，之后我们还会详细讲述）。</p><pre class="hljs undefined">&lt;!--&nbsp;index.html&nbsp;--&gt;\n&lt;!DOCTYPE&nbsp;html&gt;\n&lt;html&nbsp;lang=&quot;en&quot;&gt;\n&nbsp;&nbsp;&lt;head&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;meta&nbsp;charset=&quot;utf-8&quot;&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;title&gt;Webpack&nbsp;Sample&nbsp;Project&lt;/title&gt;\n&nbsp;&nbsp;&lt;/head&gt;\n&nbsp;&nbsp;&lt;body&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&nbsp;id=&#39;root&#39;&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;/div&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;script&nbsp;src=&quot;bundle.js&quot;&gt;&lt;/script&gt;\n&nbsp;&nbsp;&lt;/body&gt;\n&lt;/html&gt;</pre><p>我们在<code>Greeter.js</code>中定义一个返回包含问候信息的<code>html</code>元素的函数,并依据CommonJS规范导出这个函数为一个模块：</p><pre class="hljs undefined">//&nbsp;Greeter.js\nmodule.exports&nbsp;=&nbsp;function()&nbsp;{\n&nbsp;&nbsp;var&nbsp;greet&nbsp;=&nbsp;document.createElement(&#39;div&#39;);\n&nbsp;&nbsp;greet.textContent&nbsp;=&nbsp;&quot;Hi&nbsp;there&nbsp;and&nbsp;greetings!&quot;;\n&nbsp;&nbsp;return&nbsp;greet;\n};</pre><p><code>main.js</code>文件中我们写入下述代码，用以把<code>Greeter模块</code>返回的节点插入页面。</p><pre class="hljs undefined">//main.js&nbsp;\nconst&nbsp;greeter&nbsp;=&nbsp;require(&#39;./Greeter.js&#39;);\ndocument.querySelector(&quot;#root&quot;).appendChild(greeter());</pre><h4>正式使用Webpack</h4><p>webpack可以在终端中使用，在基本的使用方法如下：</p><pre class="hljs bash">#&nbsp;{extry&nbsp;file}出填写入口文件的路径，本文中就是上述main.js的路径，#&nbsp;{destination&nbsp;for&nbsp;bundled&nbsp;file}处填写打包文件的存放路径#&nbsp;填\n写路径的时候不用添加{}webpack&nbsp;{entry&nbsp;file}&nbsp;{destination&nbsp;for&nbsp;bundled&nbsp;file}</pre><p>指定入口文件后，webpack将自动识别项目所依赖的其它文件，不过需要注意的是如果你的webpack不是全局安装的，那么当你在终端中使用此命令时，需要额外指定其在node_modules中的地址，继续上面的例子，在终端中输入如下命令</p><pre class="hljs bash">#&nbsp;webpack非全局安装的情况node_modules/.bin/webpack&nbsp;app/main.js&nbsp;public/bundle.js</pre><p>结果如下</p><p><img class="image-loading"/></p><p>使用命令行打包</p><p>可以看出<code>webpack</code>同时编译了<code>main.js</code> 和<code>Greeter,js</code>,现在打开<code>index.html</code>,可以看到如下结果<br/></p><p><img class="image-loading"/></p><p>htmlResult1</p><p><br/></p><p>有没有很激动，已经成功的使用<code>Webpack</code>打包了一个文件了。不过在终端中进行复杂的操作，其实是不太方便且容易出错的，接下来看看Webpack的另一种更常见的使用方法。</p><h4>通过配置文件来使用<code>Webpack</code></h4><p>Webpack拥有很多其它的比较高级的功能（比如说本文后面会介绍的<code>loaders</code>和<code>plugins</code>），这些功能其实都可以通过命令行模式实现，但是正如前面提到的，这样不太方便且容易出错的，更好的办法是定义一个配置文件，这个配置文件其实也是一个简单的JavaScript模块，我们可以把所有的与打包相关的信息放在里面。</p><p>继续上面的例子来说明如何写这个配置文件，在当前练习文件夹的根目录下新建一个名为<code>webpack.config.js</code>的文件，我们在其中写入如下所示的简单配置代码，目前的配置主要涉及到的内容是入口文件路径和打包后文件的存放路径。</p><pre class="hljs undefined">module.exports&nbsp;=&nbsp;{\n&nbsp;&nbsp;entry:&nbsp;&nbsp;__dirname&nbsp;+&nbsp;&quot;/app/main.js&quot;,//已多次提及的唯一入口文件\n&nbsp;&nbsp;output:&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;path:&nbsp;__dirname&nbsp;+&nbsp;&quot;/public&quot;,//打包后的文件存放的地方\n&nbsp;&nbsp;&nbsp;&nbsp;filename:&nbsp;&quot;bundle.js&quot;//打包后输出文件的文件名\n&nbsp;&nbsp;}\n}</pre><blockquote><p><strong>注</strong>：“__dirname”是node.js中的一个全局变量，它指向当前执行脚本所在的目录。</p></blockquote><p>有了这个配置之后，再打包文件，只需在终端里运行<code>webpack(非全局安装需使用node_modules/.bin/webpack)</code>命令就可以了，这条命令会自动引用<code>webpack.config.js</code>文件中的配置选项，示例如下：</p><p><img class="image-loading"/></p><p>配合配置文件进行打包</p><p>又学会了一种使用<code>Webpack</code>的方法，这种方法不用管那烦人的命令行参数，有没有感觉很爽。如果我们可以连<code>webpack(非全局安装需使用node_modules/.bin/webpack)</code>这条命令都可以不用，那种感觉会不会更爽~，继续看下文。</p><h4>更快捷的执行打包任务</h4><p>在命令行中输入命令需要代码类似于<code>node_modules/.bin/webpack</code>这样的路径其实是比较烦人的，不过值得庆幸的是<code>npm</code>可以引导任务执行，对<code>npm</code>进行配置后可以在命令行中使用简单的<code>npm start</code>命令来替代上面略微繁琐的命令。在<code>package.json</code>中对<code>scripts</code>对象进行相关设置即可，设置方法如下。</p><pre class="hljs json">{&nbsp;&nbsp;&quot;name&quot;:&nbsp;&quot;webpack-sample-project&quot;,&nbsp;&nbsp;&quot;version&quot;:&nbsp;&quot;1.0.0&quot;,&nbsp;&nbsp;&quot;description&quot;:&nbsp;&quot;Sample&nbsp;webpack&nbsp;project&quot;,&nbsp;&nbsp;&quot;scripts&quot;:&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;\n&quot;start&quot;:&nbsp;&quot;webpack&quot;&nbsp;//&nbsp;修改的是这里，JSON文件不支持注释，引用时请清除\n&nbsp;&nbsp;},&nbsp;&nbsp;&quot;author&quot;:&nbsp;&quot;zhang&quot;,&nbsp;&nbsp;&quot;license&quot;:&nbsp;&quot;ISC&quot;,&nbsp;&nbsp;&quot;devDependencies&quot;:&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&quot;webpack&quot;:&nbsp;&quot;3.10.0&quot;\n&nbsp;&nbsp;}\n}</pre><blockquote><p><strong>注：</strong><code>package.json</code>中的<code>script</code>会安装一定顺序寻找命令对应位置，本地的<code>node_modules/.bin</code>路径就在这个寻找清单中，所以无论是全局还是局部安装的Webpack，你都不需要写前面那指明详细的路径了。</p></blockquote><p>npm的<code>start</code>命令是一个特殊的脚本名称，其特殊性表现在，在命令行中使用<code>npm start</code>就可以执行其对于的命令，如果对应的此脚本名称不是<code>start</code>，想要在命令行中运行时，需要这样用<code>npm run {script name}</code>如<code>npm run build</code>，我们在命令行中输入<code>npm start</code>试试，输出结果如下：</p><p><img class="image-loading"/></p><p>使用npm start 打包代码</p><p>现在只需要使用<code>npm start</code>就可以打包文件了，有没有觉得<code>webpack</code>也不过如此嘛，不过不要太小瞧<code>webpack</code>，要充分发挥其强大的功能我们需要修改配置文件的其它选项，一项项来看。</p><h3>Webpack的强大功能</h3><h4>生成Source Maps（使调试更容易）</h4><p>开发总是离不开调试，方便的调试能极大的提高开发效率，不过有时候通过打包后的文件，你是不容易找到出错了的地方，对应的你写的代码的位置的，<code>Source Maps</code>就是来帮我们解决这个问题的。</p><p>通过简单的配置，<code>webpack</code>就可以在打包时为我们生成的<code>source maps</code>，这为我们提供了一种对应编译文件和源文件的方法，使得编译后的代码可读性更高，也更容易调试。</p><p>在<code>webpack</code>的配置文件中配置<code>source maps</code>，需要配置<code>devtool</code>，它有以下四种不同的配置选项，各具优缺点，描述如下：</p><table><thead><tr class="firstRow"><th>devtool选项</th><th>配置结果</th></tr></thead><tbody><tr><td><code>source-map</code></td><td>在一个单独的文件中产生一个完整且功能完全的文件。这个文件具有最好的<code>source map</code>，但是它会减慢打包速度；</td></tr><tr><td><code>cheap-module-source-map</code></td><td>在一个单独的文件中生成一个不带列映射的<code>map</code>，不带列映射提高了打包速度，但是也使得浏览器开发者工具只能对应到具体的行，不能对应到具体的列（符号），会对调试造成不便；</td></tr><tr><td><code>eval-source-map</code></td><td>使用<code>eval</code>打包源文件模块，在同一个文件中生成干净的完整的<code>source map</code>。这个选项可以在不影响构建速度的前提下生成完整的<code>sourcemap</code>，但是对打包后输出的JS文件的执行具有性能和安全的隐患。在开发阶段这是一个非常好的选项，在生产阶段则一定不要启用这个选项；</td></tr><tr><td><code>cheap-module-eval-source-map</code></td><td>这是在打包文件时最快的生成<code>source map</code>的方法，生成的<code>Source Map</code> 会和打包后的<code>JavaScript</code>文件同行显示，没有列映射，和<code>eval-source-map</code>选项具有相似的缺点；</td></tr></tbody></table><p>正如上表所述，上述选项由上到下打包速度越来越快，不过同时也具有越来越多的负面作用，较快的打包速度的后果就是对打包后的文件的的执行有一定影响。</p><p>对小到中型的项目中，<code>eval-source-map</code>是一个很好的选项，再次强调你只应该开发阶段使用它，我们继续对上文新建的<code>webpack.config.js</code>，进行如下配置:</p><pre class="hljs undefined">module.exports&nbsp;=&nbsp;{\n&nbsp;&nbsp;devtool:&nbsp;&#39;eval-source-map&#39;,\n&nbsp;&nbsp;entry:&nbsp;&nbsp;__dirname&nbsp;+&nbsp;&quot;/app/main.js&quot;,\n&nbsp;&nbsp;output:&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;path:&nbsp;__dirname&nbsp;+&nbsp;&quot;/public&quot;,\n&nbsp;&nbsp;&nbsp;&nbsp;filename:&nbsp;&quot;bundle.js&quot;\n&nbsp;&nbsp;}\n}</pre><blockquote><p><code>cheap-module-eval-source-map</code>方法构建速度更快，但是不利于调试，推荐在大型项目考虑时间成本时使用。</p></blockquote><h4>使用webpack构建本地服务器</h4><p>想不想让你的浏览器监听你的代码的修改，并自动刷新显示修改后的结果，其实<code>Webpack</code>提供一个可选的本地开发服务器，这个本地服务器基于node.js构建，可以实现你想要的这些功能，不过它是一个单独的组件，在webpack中进行配置之前需要单独安装它作为项目依赖</p><pre class="hljs bash">npm&nbsp;install&nbsp;--save-dev&nbsp;webpack-dev-server</pre><p>devserver作为webpack配置选项中的一项，以下是它的一些配置选项，更多配置可参考<a href="https://link.jianshu.com?t=https://webpack.js.org/configuration/dev-server/" target="_blank">这里</a></p><table><thead><tr class="firstRow"><th>devserver的配置选项</th><th>功能描述</th></tr></thead><tbody><tr><td>contentBase</td><td>默认webpack-dev-server会为根文件夹提供本地服务器，如果想为另外一个目录下的文件提供本地服务器，应该在这里设置其所在目录（本例设置到“public&quot;目录）</td></tr><tr><td>port</td><td>设置默认监听端口，如果省略，默认为”8080“</td></tr><tr><td>inline</td><td>设置为<code>true</code>，当源文件改变时会自动刷新页面</td></tr><tr><td>historyApiFallback</td><td>在开发单页应用时非常有用，它依赖于HTML5 history API，如果设置为<code>true</code>，所有的跳转将指向index.html</td></tr></tbody></table><p>把这些命令加到webpack的配置文件中，现在的配置文件<code>webpack.config.js</code>如下所示</p><pre class="hljs undefined">module.exports&nbsp;=&nbsp;{\n&nbsp;&nbsp;devtool:&nbsp;&#39;eval-source-map&#39;,\n\n&nbsp;&nbsp;entry:&nbsp;&nbsp;__dirname&nbsp;+&nbsp;&quot;/app/main.js&quot;,\n&nbsp;&nbsp;output:&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;path:&nbsp;__dirname&nbsp;+&nbsp;&quot;/public&quot;,\n&nbsp;&nbsp;&nbsp;&nbsp;filename:&nbsp;&quot;bundle.js&quot;\n&nbsp;&nbsp;},\n\n&nbsp;&nbsp;devServer:&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;contentBase:&nbsp;&quot;./public&quot;,//本地服务器所加载的页面所在的目录\n&nbsp;&nbsp;&nbsp;&nbsp;historyApiFallback:&nbsp;true,//不跳转\n&nbsp;&nbsp;&nbsp;&nbsp;inline:&nbsp;true//实时刷新\n&nbsp;&nbsp;}&nbsp;\n}</pre><p>在<code>package.json</code>中的<code>scripts</code>对象中添加如下命令，用以开启本地服务器：</p><pre class="hljs json">&nbsp;&nbsp;&quot;scripts&quot;:&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&quot;test&quot;:&nbsp;&quot;echo&nbsp;&quot;Error:&nbsp;no&nbsp;test&nbsp;specified&quot;&nbsp;&amp;&amp;&nbsp;exit&nbsp;1&quot;,&nbsp;&nbsp;&nbsp;&nbsp;&quot;start&quot;:&nbsp;&quot;webpack&quot;,&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&quot;server&quot;:&nbsp;&quot;webpack-dev-server&nbsp;--open&quot;\n&nbsp;&nbsp;},</pre><p>在终端中输入<code>npm run server</code>即可在本地的<code>8080</code>端口查看结果</p><p><img class="image-loading"/></p><p>开启本地服务器</p><h4>Loaders</h4><p><strong>鼎鼎大名的Loaders登场了！</strong></p><p><code>Loaders</code>是<code>webpack</code>提供的最激动人心的功能之一了。通过使用不同的<code>loader</code>，<code>webpack</code>有能力调用外部的脚本或工具，实现对不同格式的文件的处理，比如说分析转换scss为css，或者把下一代的JS文件（ES6，ES7)转换为现代浏览器兼容的JS文件，对React的开发而言，合适的Loaders可以把React的中用到的JSX文件转换为JS文件。</p><p>Loaders需要单独安装并且需要在<code>webpack.config.js</code>中的<code>modules</code>关键字下进行配置，Loaders的配置包括以下几方面：</p><ul class=" list-paddingleft-2"><li><p><code>test</code>：一个用以匹配loaders所处理文件的拓展名的正则表达式（必须）</p></li><li><p><code>loader</code>：loader的名称（必须）</p></li><li><p><code>include/exclude</code>:手动添加必须处理的文件（文件夹）或屏蔽不需要处理的文件（文件夹）（可选）；</p></li><li><p><code>query</code>：为loaders提供额外的设置选项（可选）</p></li></ul><p>不过在配置loader之前，我们把<code>Greeter.js</code>里的问候消息放在一个单独的JSON文件里,并通过合适的配置使<code>Greeter.js</code>可以读取该JSON文件的值，各文件修改后的代码如下：</p><p>在app文件夹中创建带有问候信息的JSON文件(命名为<code>config.json</code>)</p><pre class="hljs json">{&nbsp;&nbsp;&quot;greetText&quot;:&nbsp;&quot;Hi&nbsp;there&nbsp;and&nbsp;greetings&nbsp;from&nbsp;JSON!&quot;}</pre><p>更新后的Greeter.js</p><pre class="hljs undefined">var&nbsp;config&nbsp;=&nbsp;require(&#39;./config.json&#39;);\n\nmodule.exports&nbsp;=&nbsp;function()&nbsp;{\n&nbsp;&nbsp;var&nbsp;greet&nbsp;=&nbsp;document.createElement(&#39;div&#39;);\n&nbsp;&nbsp;greet.textContent&nbsp;=&nbsp;config.greetText;\n&nbsp;&nbsp;return&nbsp;greet;\n};</pre><blockquote><p><strong>注</strong> 由于<code>webpack3.*/webpack2.*</code>已经内置可处理JSON文件，这里我们无需再添加<code>webpack1.*</code>需要的<code>json-loader</code>。在看如何具体使用loader之前我们先看看Babel是什么？</p></blockquote><h3>Babel</h3><p>Babel其实是一个编译JavaScript的平台，它可以编译代码帮你达到以下目的：</p><ul class=" list-paddingleft-2"><li><p>让你能使用最新的JavaScript代码（ES6，ES7...），而不用管新标准是否被当前使用的浏览器完全支持；</p></li><li><p>让你能使用基于JavaScript进行了拓展的语言，比如React的JSX；</p></li></ul><h4>Babel的安装与配置</h4><p>Babel其实是几个模块化的包，其核心功能位于称为<code>babel-core</code>的npm包中，webpack可以把其不同的包整合在一起使用，对于每一个你需要的功能或拓展，你都需要安装单独的包（用得最多的是解析Es6的<code>babel-env-preset</code>包和解析JSX的<code>babel-preset-react</code>包）。</p><p>我们先来一次性安装这些依赖包</p><pre class="hljs bash">//&nbsp;npm一次性安装多个依赖模块，模块之间用空格隔开\nnpm&nbsp;install&nbsp;--save-dev&nbsp;babel-core&nbsp;babel-loader&nbsp;babel-preset-env&nbsp;babel-preset-react</pre><p>在<code>webpack</code>中配置Babel的方法如下:</p><pre class="hljs undefined">module.exports&nbsp;=&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;entry:&nbsp;__dirname&nbsp;+&nbsp;&quot;/app/main.js&quot;,//已多次提及的唯一入口文件\n&nbsp;&nbsp;&nbsp;&nbsp;output:&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;path:&nbsp;__dirname&nbsp;+&nbsp;&quot;/public&quot;,//打包后的文件存放的地方\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;filename:&nbsp;&quot;bundle.js&quot;//打包后输出文件的文件名\n&nbsp;&nbsp;&nbsp;&nbsp;},\n&nbsp;&nbsp;&nbsp;&nbsp;devtool:&nbsp;&#39;eval-source-map&#39;,\n&nbsp;&nbsp;&nbsp;&nbsp;devServer:&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;contentBase:&nbsp;&quot;./public&quot;,//本地服务器所加载的页面所在的目录\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;historyApiFallback:&nbsp;true,//不跳转\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inline:&nbsp;true//实时刷新\n&nbsp;&nbsp;&nbsp;&nbsp;},\n&nbsp;&nbsp;&nbsp;&nbsp;module:&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rules:&nbsp;[\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;test:&nbsp;/(.jsx|.js)$/,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;use:&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;loader:&nbsp;&quot;babel-loader&quot;,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;options:&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;presets:&nbsp;[\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;env&quot;,&nbsp;&quot;react&quot;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;]\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;exclude:&nbsp;/node_modules/\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;]\n&nbsp;&nbsp;&nbsp;&nbsp;}\n};</pre><p>现在你的webpack的配置已经允许你使用ES6以及JSX的语法了。继续用上面的例子进行测试，不过这次我们会使用React，记得先安装 React 和 React-DOM</p><pre class="hljs bash">npm&nbsp;install&nbsp;--save&nbsp;react&nbsp;react-dom</pre><p>接下来我们使用ES6的语法，更新<code>Greeter.js</code>并返回一个React组件</p><pre class="hljs undefined">//Greeter,js\nimport&nbsp;React,&nbsp;{Component}&nbsp;from&nbsp;&#39;react&#39;\nimport&nbsp;config&nbsp;from&nbsp;&#39;./config.json&#39;;\n\nclass&nbsp;Greeter&nbsp;extends&nbsp;Component{\n&nbsp;&nbsp;render()&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;(\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{config.greetText}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/div&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;);\n&nbsp;&nbsp;}\n}\n\nexport&nbsp;default&nbsp;Greeter</pre><p>修改<code>main.js</code>如下，使用ES6的模块定义和渲染Greeter模块</p><pre class="hljs undefined">//&nbsp;main.js\nimport&nbsp;React&nbsp;from&nbsp;&#39;react&#39;;\nimport&nbsp;{render}&nbsp;from&nbsp;&#39;react-dom&#39;;\nimport&nbsp;Greeter&nbsp;from&nbsp;&#39;./Greeter&#39;;\n\nrender(&lt;Greeter&nbsp;/&gt;,&nbsp;document.getElementById(&#39;root&#39;));</pre><p>重新使用<code>npm start</code>打包，如果之前打开的本地服务器没有关闭，你应该可以在<code>localhost:8080</code>下看到与之前一样的内容，这说明<code>react</code>和<code>es6</code>被正常打包了。</p><p><img class="image-loading"/></p><p>localhost:8080</p><h4>Babel的配置</h4><p>Babel其实可以完全在 <code>webpack.config.js</code> 中进行配置，但是考虑到babel具有非常多的配置选项，在单一的<code>webpack.config.js</code>文件中进行配置往往使得这个文件显得太复杂，因此一些开发者支持把babel的配置选项放在一个单独的名为 &quot;.babelrc&quot; 的配置文件中。我们现在的babel的配置并不算复杂，不过之后我们会再加一些东西，因此现在我们就提取出相关部分，分两个配置文件进行配置（webpack会自动调用<code>.babelrc</code>里的babel配置选项），如下：</p><pre class="hljs undefined">module.exports&nbsp;=&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;entry:&nbsp;__dirname&nbsp;+&nbsp;&quot;/app/main.js&quot;,//已多次提及的唯一入口文件\n&nbsp;&nbsp;&nbsp;&nbsp;output:&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;path:&nbsp;__dirname&nbsp;+&nbsp;&quot;/public&quot;,//打包后的文件存放的地方\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;filename:&nbsp;&quot;bundle.js&quot;//打包后输出文件的文件名\n&nbsp;&nbsp;&nbsp;&nbsp;},\n&nbsp;&nbsp;&nbsp;&nbsp;devtool:&nbsp;&#39;eval-source-map&#39;,\n&nbsp;&nbsp;&nbsp;&nbsp;devServer:&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;contentBase:&nbsp;&quot;./public&quot;,//本地服务器所加载的页面所在的目录\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;historyApiFallback:&nbsp;true,//不跳转\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inline:&nbsp;true//实时刷新\n&nbsp;&nbsp;&nbsp;&nbsp;},\n&nbsp;&nbsp;&nbsp;&nbsp;module:&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rules:&nbsp;[\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;test:&nbsp;/(.jsx|.js)$/,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;use:&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;loader:&nbsp;&quot;babel-loader&quot;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;exclude:&nbsp;/node_modules/\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;]\n&nbsp;&nbsp;&nbsp;&nbsp;}\n};</pre><pre class="hljs undefined">//.babelrc\n{\n&nbsp;&nbsp;&quot;presets&quot;:&nbsp;[&quot;react&quot;,&nbsp;&quot;env&quot;]\n}</pre><p>到目前为止，我们已经知道了，对于模块，Webpack能提供非常强大的处理功能，那那些是模块呢。</p><h3>一切皆模块</h3><p>Webpack有一个不可不说的优点，它把所有的文件都都当做模块处理，JavaScript代码，CSS和fonts以及图片等等通过合适的loader都可以被处理。</p><h4>CSS</h4><p>webpack提供两个工具处理样式表，<code>css-loader</code> 和 <code>style-loader</code>，二者处理的任务不同，<code>css-loader</code>使你能够使用类似<code>@import</code> 和 <code>url(...)</code>的方法实现 <code>require()</code>的功能,<code>style-loader</code>将所有的计算后的样式加入页面中，二者组合在一起使你能够把样式表嵌入webpack打包后的JS文件中。</p><p>继续上面的例子</p><pre class="hljs bash">//安装\nnpm&nbsp;install&nbsp;--save-dev&nbsp;style-loader&nbsp;css-loader</pre><pre class="hljs undefined">//使用\nmodule.exports&nbsp;=&nbsp;{\n\n&nbsp;&nbsp;&nbsp;...\n&nbsp;&nbsp;&nbsp;&nbsp;module:&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rules:&nbsp;[\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;test:&nbsp;/(.jsx|.js)$/,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;use:&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;loader:&nbsp;&quot;babel-loader&quot;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;exclude:&nbsp;/node_modules/\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;test:&nbsp;/.css$/,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;use:&nbsp;[\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;loader:&nbsp;&quot;style-loader&quot;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;loader:&nbsp;&quot;css-loader&quot;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;]\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;]\n&nbsp;&nbsp;&nbsp;&nbsp;}\n};</pre><blockquote><p>请注意这里对同一个文件引入多个loader的方法。</p></blockquote><p>接下来，在app文件夹里创建一个名字为&quot;main.css&quot;的文件，对一些元素设置样式</p><pre class="hljs css">/*&nbsp;main.css&nbsp;*/html&nbsp;{&nbsp;&nbsp;box-sizing:&nbsp;border-box;&nbsp;&nbsp;-ms-text-size-adjust:&nbsp;100%;&nbsp;&nbsp;-webkit-text-size-adjust:&nbsp;100%;\n}\n\n*,&nbsp;*:before,&nbsp;*:after&nbsp;{&nbsp;&nbsp;box-sizing:&nbsp;inherit;\n}body&nbsp;{&nbsp;&nbsp;margin:&nbsp;0;&nbsp;&nbsp;font-family:&nbsp;&#39;Helvetica&nbsp;Neue&#39;,&nbsp;Helvetica,&nbsp;Arial,&nbsp;sans-serif;\n}h1,&nbsp;h2,&nbsp;h3,&nbsp;h4,&nbsp;h5,&nbsp;h6,&nbsp;p,&nbsp;ul&nbsp;{&nbsp;&nbsp;margin:&nbsp;0;&nbsp;&nbsp;padding:&nbsp;0;\n}</pre><p>我们这里例子中用到的<code>webpack</code>只有单一的入口，其它的模块需要通过 <code>import</code>, <code>require</code>, <code>url</code>等与入口文件建立其关联，为了让webpack能找到”main.css“文件，我们把它导入”main.js “中，如下</p><pre class="hljs undefined">//main.js\nimport&nbsp;React&nbsp;from&nbsp;&#39;react&#39;;\nimport&nbsp;{render}&nbsp;from&nbsp;&#39;react-dom&#39;;\nimport&nbsp;Greeter&nbsp;from&nbsp;&#39;./Greeter&#39;;\n\nimport&nbsp;&#39;./main.css&#39;;//使用require导入css文件\n\nrender(&lt;Greeter&nbsp;/&gt;,&nbsp;document.getElementById(&#39;root&#39;));</pre><blockquote><p>通常情况下，css会和js打包到同一个文件中，并不会打包为一个单独的css文件，不过通过合适的配置webpack也可以把css打包为单独的文件的。</p></blockquote><p>上面的代码说明webpack是怎么把css当做模块看待的，咱们继续看一个更加真实的css模块实践。</p><h4>CSS module</h4><p>在过去的一些年里，JavaScript通过一些新的语言特性，更好的工具以及更好的实践方法（比如说模块化）发展得非常迅速。模块使得开发者把复杂的代码转化为小的，干净的，依赖声明明确的单元，配合优化工具，依赖管理和加载管理可以自动完成。</p><p>不过前端的另外一部分，CSS发展就相对慢一些，大多的样式表却依旧巨大且充满了全局类名，维护和修改都非常困难。</p><p>被称为<code>CSS modules</code>的技术意在把JS的模块化思想带入CSS中来，通过CSS模块，所有的类名，动画名默认都只作用于当前模块。Webpack对CSS模块化提供了非常好的支持，只需要在CSS loader中进行简单配置即可，然后就可以直接把CSS的类名传递到组件的代码中，这样做有效避免了全局污染。具体的代码如下</p><pre class="hljs undefined">module.exports&nbsp;=&nbsp;{\n\n&nbsp;&nbsp;&nbsp;&nbsp;...\n\n&nbsp;&nbsp;&nbsp;&nbsp;module:&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rules:&nbsp;[\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;test:&nbsp;/(.jsx|.js)$/,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;use:&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;loader:&nbsp;&quot;babel-loader&quot;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;exclude:&nbsp;/node_modules/\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;test:&nbsp;/.css$/,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;use:&nbsp;[\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;loader:&nbsp;&quot;style-loader&quot;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;loader:&nbsp;&quot;css-loader&quot;,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;options:&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;modules:&nbsp;true,&nbsp;//&nbsp;指定启用css&nbsp;modules\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;localIdentName:&nbsp;&#39;[name]__[local]--[hash:base64:5]&#39;&nbsp;//&nbsp;指定css的类名格式\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;]\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;]\n&nbsp;&nbsp;&nbsp;&nbsp;}\n};</pre><p>我们在app文件夹下创建一个<code>Greeter.css</code>文件来进行一下测试</p><pre class="hljs undefined">/*&nbsp;Greeter.css&nbsp;*/\n.root&nbsp;{\n&nbsp;&nbsp;background-color:&nbsp;#eee;\n&nbsp;&nbsp;padding:&nbsp;10px;\n&nbsp;&nbsp;border:&nbsp;3px&nbsp;solid&nbsp;#ccc;\n}</pre><p>导入<code>.root</code>到Greeter.js中</p><pre class="hljs undefined">import&nbsp;React,&nbsp;{Component}&nbsp;from&nbsp;&#39;react&#39;;\nimport&nbsp;config&nbsp;from&nbsp;&#39;./config.json&#39;;\nimport&nbsp;styles&nbsp;from&nbsp;&#39;./Greeter.css&#39;;//导入\n\nclass&nbsp;Greeter&nbsp;extends&nbsp;Component{\n&nbsp;&nbsp;render()&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;(\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&nbsp;className={styles.root}&gt;&nbsp;//使用cssModule添加类名的方法\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{config.greetText}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/div&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;);\n&nbsp;&nbsp;}\n}\n\nexport&nbsp;default&nbsp;Greeter</pre><p>放心使用把，相同的类名也不会造成不同组件之间的污染。</p><p><img class="image-loading"/></p><p>应用了css module后的样式</p><p>CSS modules 也是一个很大的主题，有兴趣的话可以去其<a href="https://link.jianshu.com?t=https://github.com/css-modules/css-modules" target="_blank">官方文档</a>了解更多。</p><h4>CSS预处理器</h4><p><code>Sass</code> 和 <code>Less</code> 之类的预处理器是对原生CSS的拓展，它们允许你使用类似于<code>variables</code>, <code>nesting</code>, <code>mixins</code>, <code>inheritance</code>等不存在于CSS中的特性来写CSS，CSS预处理器可以这些特殊类型的语句转化为浏览器可识别的CSS语句，</p><p>你现在可能都已经熟悉了，在webpack里使用相关loaders进行配置就可以使用了，以下是常用的CSS 处理<code>loaders</code>:</p><ul class=" list-paddingleft-2"><li><p><code>Less Loader</code></p></li><li><p><code>Sass Loader</code></p></li><li><p><code>Stylus Loader</code></p></li></ul><p>不过其实也存在一个CSS的处理平台<code>-PostCSS</code>，它可以帮助你的CSS实现更多的功能，在其<a href="https://link.jianshu.com?t=https://github.com/postcss/postcss" target="_blank">官方文档</a>可了解更多相关知识。</p><p>举例来说如何使用PostCSS，我们使用PostCSS来为CSS代码自动添加适应不同浏览器的CSS前缀。</p><p>首先安装<code>postcss-loader</code> 和 <code>autoprefixer</code>（自动添加前缀的插件）</p><pre class="hljs undefined">npm&nbsp;install&nbsp;--save-dev&nbsp;postcss-loader&nbsp;autoprefixer</pre><p>接下来，在webpack配置文件中添加<code>postcss-loader</code>，在根目录新建<code>postcss.config.js</code>,并添加如下代码之后，重新使用<code>npm start</code>打包时，你写的css会自动根据Can i use里的数据添加不同前缀了。</p><pre class="hljs undefined">//webpack.config.js\nmodule.exports&nbsp;=&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;...\n&nbsp;&nbsp;&nbsp;&nbsp;module:&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rules:&nbsp;[\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;test:&nbsp;/(.jsx|.js)$/,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;use:&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;loader:&nbsp;&quot;babel-loader&quot;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;exclude:&nbsp;/node_modules/\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;test:&nbsp;/.css$/,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;use:&nbsp;[\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;loader:&nbsp;&quot;style-loader&quot;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;loader:&nbsp;&quot;css-loader&quot;,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;options:&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;modules:&nbsp;true\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;loader:&nbsp;&quot;postcss-loader&quot;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;]\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;]\n&nbsp;&nbsp;&nbsp;&nbsp;}\n}</pre><pre class="hljs undefined">//&nbsp;postcss.config.js\nmodule.exports&nbsp;=&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;plugins:&nbsp;[\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;require(&#39;autoprefixer&#39;)\n&nbsp;&nbsp;&nbsp;&nbsp;]\n}</pre><p>至此，本文已经谈论了处理JS的Babel和处理CSS的PostCSS的基本用法，它们其实也是两个单独的平台，配合<code>webpack</code>可以很好的发挥它们的作用。接下来介绍Webpack中另一个非常重要的功能-<code>Plugins</code></p><h3>插件（Plugins）</h3><p>插件（Plugins）是用来拓展Webpack功能的，它们会在整个构建过程中生效，执行相关的任务。<br/>Loaders和Plugins常常被弄混，但是他们其实是完全不同的东西，可以这么来说，loaders是在打包构建过程中用来处理源文件的（JSX，Scss，Less..），一次处理一个，插件并不直接操作单个文件，它直接对整个构建过程其作用。</p><p>Webpack有很多内置插件，同时也有很多第三方插件，可以让我们完成更加丰富的功能。</p><h4>使用插件的方法</h4><p>要使用某个插件，我们需要通过<code>npm</code>安装它，然后要做的就是在webpack配置中的plugins关键字部分添加该插件的一个实例（plugins是一个数组）继续上面的例子，我们添加了一个给打包后代码<a href="https://link.jianshu.com?t=https://webpack.js.org/plugins/banner-plugin/" target="_blank">添加版权声明的插件</a>。</p><pre class="hljs undefined">const&nbsp;webpack&nbsp;=&nbsp;require(&#39;webpack&#39;);\n\nmodule.exports&nbsp;=&nbsp;{\n...\n&nbsp;&nbsp;&nbsp;&nbsp;module:&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rules:&nbsp;[\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;test:&nbsp;/(.jsx|.js)$/,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;use:&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;loader:&nbsp;&quot;babel-loader&quot;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;exclude:&nbsp;/node_modules/\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;test:&nbsp;/.css$/,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;use:&nbsp;[\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;loader:&nbsp;&quot;style-loader&quot;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;loader:&nbsp;&quot;css-loader&quot;,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;options:&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;modules:&nbsp;true\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;loader:&nbsp;&quot;postcss-loader&quot;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;]\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;]\n&nbsp;&nbsp;&nbsp;&nbsp;},\n&nbsp;&nbsp;&nbsp;&nbsp;plugins:&nbsp;[\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new&nbsp;webpack.BannerPlugin(&#39;版权所有，翻版必究&#39;)\n&nbsp;&nbsp;&nbsp;&nbsp;],\n};</pre><p>通过这个插件，打包后的JS文件显示如下</p><p><img class="image-loading"/></p><p>版权所有，翻版必究</p><p>这就是webpack插件的基础用法了，下面给大家推荐几个常用的插件</p><h4>HtmlWebpackPlugin</h4><p>这个插件的作用是依据一个简单的<code>index.html</code>模板，生成一个自动引用你打包后的JS文件的新<code>index.html</code>。这在每次生成的js文件名称不同时非常有用（比如添加了<code>hash</code>值）。</p><p><strong>安装</strong></p><pre class="hljs bash">npm&nbsp;install&nbsp;--save-dev&nbsp;html-webpack-plugin</pre><p>这个插件自动完成了我们之前手动做的一些事情，在正式使用之前需要对一直以来的项目结构做一些更改：</p><ol class=" list-paddingleft-2"><li><p>移除public文件夹，利用此插件，<code>index.html</code>文件会自动生成，此外CSS已经通过前面的操作打包到JS中了。</p></li><li><p>在app目录下，创建一个<code>index.tmpl.html</code>文件模板，这个模板包含<code>title</code>等必须元素，在编译过程中，插件会依据此模板生成最终的html页面，会自动添加所依赖的 css, js，favicon等文件，<code>index.tmpl.html</code>中的模板源代码如下：</p></li></ol><pre class="hljs undefined">&lt;!DOCTYPE&nbsp;html&gt;\n&lt;html&nbsp;lang=&quot;en&quot;&gt;\n&nbsp;&nbsp;&lt;head&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;meta&nbsp;charset=&quot;utf-8&quot;&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;title&gt;Webpack&nbsp;Sample&nbsp;Project&lt;/title&gt;\n&nbsp;&nbsp;&lt;/head&gt;\n&nbsp;&nbsp;&lt;body&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&nbsp;id=&#39;root&#39;&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;/div&gt;\n&nbsp;&nbsp;&lt;/body&gt;\n&lt;/html&gt;</pre><p>3.更新<code>webpack</code>的配置文件，方法同上,新建一个<code>build</code>文件夹用来存放最终的输出文件</p><pre class="hljs undefined">const&nbsp;webpack&nbsp;=&nbsp;require(&#39;webpack&#39;);\nconst&nbsp;HtmlWebpackPlugin&nbsp;=&nbsp;require(&#39;html-webpack-plugin&#39;);\n\nmodule.exports&nbsp;=&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;entry:&nbsp;__dirname&nbsp;+&nbsp;&quot;/app/main.js&quot;,//已多次提及的唯一入口文件\n&nbsp;&nbsp;&nbsp;&nbsp;output:&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;path:&nbsp;__dirname&nbsp;+&nbsp;&quot;/build&quot;,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;filename:&nbsp;&quot;bundle.js&quot;\n&nbsp;&nbsp;&nbsp;&nbsp;},\n&nbsp;&nbsp;&nbsp;&nbsp;devtool:&nbsp;&#39;eval-source-map&#39;,\n&nbsp;&nbsp;&nbsp;&nbsp;devServer:&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;contentBase:&nbsp;&quot;./public&quot;,//本地服务器所加载的页面所在的目录\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;historyApiFallback:&nbsp;true,//不跳转\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inline:&nbsp;true//实时刷新\n&nbsp;&nbsp;&nbsp;&nbsp;},\n&nbsp;&nbsp;&nbsp;&nbsp;module:&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rules:&nbsp;[\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;test:&nbsp;/(.jsx|.js)$/,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;use:&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;loader:&nbsp;&quot;babel-loader&quot;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;exclude:&nbsp;/node_modules/\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;test:&nbsp;/.css$/,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;use:&nbsp;[\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;loader:&nbsp;&quot;style-loader&quot;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;loader:&nbsp;&quot;css-loader&quot;,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;options:&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;modules:&nbsp;true\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;loader:&nbsp;&quot;postcss-loader&quot;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;]\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;]\n&nbsp;&nbsp;&nbsp;&nbsp;},\n&nbsp;&nbsp;&nbsp;&nbsp;plugins:&nbsp;[\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new&nbsp;webpack.BannerPlugin(&#39;版权所有，翻版必究&#39;),\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new&nbsp;HtmlWebpackPlugin({\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;template:&nbsp;__dirname&nbsp;+&nbsp;&quot;/app/index.tmpl.html&quot;//new&nbsp;一个这个插件的实例，并传入相关的参数\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;})\n&nbsp;&nbsp;&nbsp;&nbsp;],\n};</pre><p>再次执行<code>npm start</code>你会发现，build文件夹下面生成了<code>bundle.js</code>和<code>index.html</code>。</p><p><img class="image-loading"/></p><p>build文件夹</p><h4>Hot Module Replacement</h4><p><code>Hot Module Replacement</code>（HMR）也是webpack里很有用的一个插件，它允许你在修改组件代码后，自动刷新实时预览修改后的效果。</p><p>在webpack中实现HMR也很简单，只需要做两项配置</p><ol class=" list-paddingleft-2"><li><p>在webpack配置文件中添加HMR插件；</p></li><li><p>在Webpack Dev Server中添加“hot”参数；</p></li></ol><p>不过配置完这些后，JS模块其实还是不能自动热加载的，还需要在你的JS模块中执行一个Webpack提供的API才能实现热加载，虽然这个API不难使用，但是如果是React模块，使用我们已经熟悉的Babel可以更方便的实现功能热加载。</p><p>整理下我们的思路，具体实现方法如下</p><ul class=" list-paddingleft-2"><li><p><code>Babel</code>和<code>webpack</code>是独立的工具</p></li><li><p>二者可以一起工作</p></li><li><p>二者都可以通过插件拓展功能</p></li><li><p>HMR是一个webpack插件，它让你能浏览器中实时观察模块修改后的效果，但是如果你想让它工作，需要对模块进行额外的配额；</p></li><li><p>Babel有一个叫做<code>react-transform-hrm</code>的插件，可以在不对React模块进行额外的配置的前提下让HMR正常工作；</p></li></ul><p>还是继续上例来实际看看如何配置</p><pre class="hljs undefined">const&nbsp;webpack&nbsp;=&nbsp;require(&#39;webpack&#39;);\nconst&nbsp;HtmlWebpackPlugin&nbsp;=&nbsp;require(&#39;html-webpack-plugin&#39;);\n\nmodule.exports&nbsp;=&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;entry:&nbsp;__dirname&nbsp;+&nbsp;&quot;/app/main.js&quot;,//已多次提及的唯一入口文件\n&nbsp;&nbsp;&nbsp;&nbsp;output:&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;path:&nbsp;__dirname&nbsp;+&nbsp;&quot;/build&quot;,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;filename:&nbsp;&quot;bundle.js&quot;\n&nbsp;&nbsp;&nbsp;&nbsp;},\n&nbsp;&nbsp;&nbsp;&nbsp;devtool:&nbsp;&#39;eval-source-map&#39;,\n&nbsp;&nbsp;&nbsp;&nbsp;devServer:&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;contentBase:&nbsp;&quot;./public&quot;,//本地服务器所加载的页面所在的目录\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;historyApiFallback:&nbsp;true,//不跳转\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inline:&nbsp;true,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;hot:&nbsp;true\n&nbsp;&nbsp;&nbsp;&nbsp;},\n&nbsp;&nbsp;&nbsp;&nbsp;module:&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rules:&nbsp;[\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;test:&nbsp;/(.jsx|.js)$/,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;use:&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;loader:&nbsp;&quot;babel-loader&quot;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;exclude:&nbsp;/node_modules/\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;test:&nbsp;/.css$/,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;use:&nbsp;[\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;loader:&nbsp;&quot;style-loader&quot;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;loader:&nbsp;&quot;css-loader&quot;,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;options:&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;modules:&nbsp;true\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;loader:&nbsp;&quot;postcss-loader&quot;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;]\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;]\n&nbsp;&nbsp;&nbsp;&nbsp;},\n&nbsp;&nbsp;&nbsp;&nbsp;plugins:&nbsp;[\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new&nbsp;webpack.BannerPlugin(&#39;版权所有，翻版必究&#39;),\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new&nbsp;HtmlWebpackPlugin({\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;template:&nbsp;__dirname&nbsp;+&nbsp;&quot;/app/index.tmpl.html&quot;//new&nbsp;一个这个插件的实例，并传入相关的参数\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}),\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new&nbsp;webpack.HotModuleReplacementPlugin()//热加载插件\n&nbsp;&nbsp;&nbsp;&nbsp;],\n};</pre><p>安装<code>react-transform-hmr</code></p><pre class="hljs bash">npm&nbsp;install&nbsp;--save-dev&nbsp;babel-plugin-react-transform&nbsp;react-transform-hmr</pre><p>配置Babel</p><pre class="hljs undefined">//&nbsp;.babelrc\n{\n&nbsp;&nbsp;&quot;presets&quot;:&nbsp;[&quot;react&quot;,&nbsp;&quot;env&quot;],\n&nbsp;&nbsp;&quot;env&quot;:&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&quot;development&quot;:&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&quot;plugins&quot;:&nbsp;[[&quot;react-transform&quot;,&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;transforms&quot;:&nbsp;[{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;transform&quot;:&nbsp;&quot;react-transform-hmr&quot;,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;imports&quot;:&nbsp;[&quot;react&quot;],\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;locals&quot;:&nbsp;[&quot;module&quot;]\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}]\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}]]\n&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;}\n}</pre><p>现在当你使用React时，可以热加载模块了,每次保存就能在浏览器上看到更新内容。</p><h3>产品阶段的构建</h3><p>目前为止，我们已经使用webpack构建了一个完整的开发环境。但是在产品阶段，可能还需要对打包的文件进行额外的处理，比如说优化，压缩，缓存以及分离CSS和JS。</p><p>对于复杂的项目来说，需要复杂的配置，这时候分解配置文件为多个小的文件可以使得事情井井有条，以上面的例子来说，我们创建一个<code>webpack.production.config.js</code>的文件，在里面加上基本的配置,它和原始的webpack.config.js很像，如下</p><pre class="hljs undefined">//&nbsp;webpack.production.config.js\nconst&nbsp;webpack&nbsp;=&nbsp;require(&#39;webpack&#39;);\nconst&nbsp;HtmlWebpackPlugin&nbsp;=&nbsp;require(&#39;html-webpack-plugin&#39;);\n\nmodule.exports&nbsp;=&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;entry:&nbsp;__dirname&nbsp;+&nbsp;&quot;/app/main.js&quot;,&nbsp;//已多次提及的唯一入口文件\n&nbsp;&nbsp;&nbsp;&nbsp;output:&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;path:&nbsp;__dirname&nbsp;+&nbsp;&quot;/build&quot;,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;filename:&nbsp;&quot;bundle.js&quot;\n&nbsp;&nbsp;&nbsp;&nbsp;},\n&nbsp;&nbsp;&nbsp;&nbsp;devtool:&nbsp;&#39;null&#39;,&nbsp;//注意修改了这里，这能大大压缩我们的打包代码\n&nbsp;&nbsp;&nbsp;&nbsp;devServer:&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;contentBase:&nbsp;&quot;./public&quot;,&nbsp;//本地服务器所加载的页面所在的目录\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;historyApiFallback:&nbsp;true,&nbsp;//不跳转\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inline:&nbsp;true,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;hot:&nbsp;true\n&nbsp;&nbsp;&nbsp;&nbsp;},\n&nbsp;&nbsp;&nbsp;&nbsp;module:&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rules:&nbsp;[{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;test:&nbsp;/(.jsx|.js)$/,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;use:&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;loader:&nbsp;&quot;babel-loader&quot;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;exclude:&nbsp;/node_modules/\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;test:&nbsp;/.css$/,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;use:&nbsp;ExtractTextPlugin.extract({\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fallback:&nbsp;&quot;style-loader&quot;,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;use:&nbsp;[{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;loader:&nbsp;&quot;css-loader&quot;,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;options:&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;modules:&nbsp;true\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;loader:&nbsp;&quot;postcss-loader&quot;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}],\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;})\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}]\n&nbsp;&nbsp;&nbsp;&nbsp;},\n&nbsp;&nbsp;&nbsp;&nbsp;plugins:&nbsp;[\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new&nbsp;webpack.BannerPlugin(&#39;版权所有，翻版必究&#39;),\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new&nbsp;HtmlWebpackPlugin({\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;template:&nbsp;__dirname&nbsp;+&nbsp;&quot;/app/index.tmpl.html&quot;&nbsp;//new&nbsp;一个这个插件的实例，并传入相关的参数\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}),\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new&nbsp;webpack.HotModuleReplacementPlugin()&nbsp;//热加载插件\n&nbsp;&nbsp;&nbsp;&nbsp;],\n};</pre><pre class="hljs undefined">//package.json\n{\n&nbsp;&nbsp;&quot;name&quot;:&nbsp;&quot;test&quot;,\n&nbsp;&nbsp;&quot;version&quot;:&nbsp;&quot;1.0.0&quot;,\n&nbsp;&nbsp;&quot;description&quot;:&nbsp;&quot;&quot;,\n&nbsp;&nbsp;&quot;main&quot;:&nbsp;&quot;index.js&quot;,\n&nbsp;&nbsp;&quot;scripts&quot;:&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&quot;test&quot;:&nbsp;&quot;echo&nbsp;&quot;Error:&nbsp;no&nbsp;test&nbsp;specified&quot;&nbsp;&amp;&amp;&nbsp;exit&nbsp;1&quot;,\n&nbsp;&nbsp;&nbsp;&nbsp;&quot;start&quot;:&nbsp;&quot;webpack&quot;,\n&nbsp;&nbsp;&nbsp;&nbsp;&quot;server&quot;:&nbsp;&quot;webpack-dev-server&nbsp;--open&quot;,\n&nbsp;&nbsp;&nbsp;&nbsp;&quot;build&quot;:&nbsp;&quot;NODE_ENV=production&nbsp;webpack&nbsp;--config&nbsp;./webpack.production.config.js&nbsp;--progress&quot;\n&nbsp;&nbsp;},\n&nbsp;&nbsp;&quot;author&quot;:&nbsp;&quot;&quot;,\n&nbsp;&nbsp;&quot;license&quot;:&nbsp;&quot;ISC&quot;,\n&nbsp;&nbsp;&quot;devDependencies&quot;:&nbsp;{\n...\n&nbsp;&nbsp;},\n&nbsp;&nbsp;&quot;dependencies&quot;:&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&quot;react&quot;:&nbsp;&quot;^15.6.1&quot;,\n&nbsp;&nbsp;&nbsp;&nbsp;&quot;react-dom&quot;:&nbsp;&quot;^15.6.1&quot;\n&nbsp;&nbsp;}\n}</pre><blockquote><p><strong>注意:</strong>如果是window电脑，<code>build</code>需要配置为<code>&quot;build&quot;: &quot;set NODE_ENV=production &amp;&amp; webpack --config ./webpack.production.config.js --progress&quot;</code>.谢谢评论区简友提醒。</p></blockquote><h4>优化插件</h4><p>webpack提供了一些在发布阶段非常有用的优化插件，它们大多来自于webpack社区，可以通过npm安装，通过以下插件可以完成产品发布阶段所需的功能</p><ul class=" list-paddingleft-2"><li><p><code>OccurenceOrderPlugin</code> :为组件分配ID，通过这个插件webpack可以分析和优先考虑使用最多的模块，并为它们分配最小的ID</p></li><li><p><code>UglifyJsPlugin</code>：压缩JS代码；</p></li><li><p><code>ExtractTextPlugin</code>：分离CSS和JS文件</p></li></ul><p>我们继续用例子来看看如何添加它们，OccurenceOrder 和 UglifyJS plugins 都是内置插件，你需要做的只是安装其它非内置插件</p><pre class="hljs bash">npm&nbsp;install&nbsp;--save-dev&nbsp;extract-text-webpack-plugin</pre><p>在配置文件的plugins后引用它们</p><pre class="hljs undefined">//&nbsp;webpack.production.config.js\nconst&nbsp;webpack&nbsp;=&nbsp;require(&#39;webpack&#39;);\nconst&nbsp;HtmlWebpackPlugin&nbsp;=&nbsp;require(&#39;html-webpack-plugin&#39;);\nconst&nbsp;ExtractTextPlugin&nbsp;=&nbsp;require(&#39;extract-text-webpack-plugin&#39;);\n\nmodule.exports&nbsp;=&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;entry:&nbsp;__dirname&nbsp;+&nbsp;&quot;/app/main.js&quot;,//已多次提及的唯一入口文件\n&nbsp;&nbsp;&nbsp;&nbsp;output:&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;path:&nbsp;__dirname&nbsp;+&nbsp;&quot;/build&quot;,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;filename:&nbsp;&quot;bundle.js&quot;\n&nbsp;&nbsp;&nbsp;&nbsp;},\n&nbsp;&nbsp;&nbsp;&nbsp;devtool:&nbsp;&#39;none&#39;,\n&nbsp;&nbsp;&nbsp;&nbsp;devServer:&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;contentBase:&nbsp;&quot;./public&quot;,//本地服务器所加载的页面所在的目录\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;historyApiFallback:&nbsp;true,//不跳转\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inline:&nbsp;true,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;hot:&nbsp;true\n&nbsp;&nbsp;&nbsp;&nbsp;},\n&nbsp;&nbsp;&nbsp;&nbsp;module:&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rules:&nbsp;[\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;test:&nbsp;/(.jsx|.js)$/,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;use:&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;loader:&nbsp;&quot;babel-loader&quot;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;exclude:&nbsp;/node_modules/\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;test:&nbsp;/.css$/,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;use:&nbsp;[\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;loader:&nbsp;&quot;style-loader&quot;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;loader:&nbsp;&quot;css-loader&quot;,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;options:&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;modules:&nbsp;true\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;loader:&nbsp;&quot;postcss-loader&quot;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;]\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;]\n&nbsp;&nbsp;&nbsp;&nbsp;},\n&nbsp;&nbsp;&nbsp;&nbsp;plugins:&nbsp;[\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new&nbsp;webpack.BannerPlugin(&#39;版权所有，翻版必究&#39;),\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new&nbsp;HtmlWebpackPlugin({\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;template:&nbsp;__dirname&nbsp;+&nbsp;&quot;/app/index.tmpl.html&quot;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}),\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new&nbsp;webpack.optimize.OccurrenceOrderPlugin(),\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new&nbsp;webpack.optimize.UglifyJsPlugin(),\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new&nbsp;ExtractTextPlugin(&quot;style.css&quot;)\n&nbsp;&nbsp;&nbsp;&nbsp;],\n};</pre><p>此时执行<code>npm run build</code>可以看见代码是被压缩后的</p><p><img class="image-loading"/></p><p>压缩后的代码</p><h4>缓存</h4><p>缓存无处不在，使用缓存的最好方法是保证你的文件名和文件内容是匹配的（内容改变，名称相应改变）</p><p>webpack可以把一个哈希值添加到打包的文件名中，使用方法如下,添加特殊的字符串混合体（[name], [id] and [hash]）到输出文件名前</p><pre class="hljs undefined">const&nbsp;webpack&nbsp;=&nbsp;require(&#39;webpack&#39;);\nconst&nbsp;HtmlWebpackPlugin&nbsp;=&nbsp;require(&#39;html-webpack-plugin&#39;);\nconst&nbsp;ExtractTextPlugin&nbsp;=&nbsp;require(&#39;extract-text-webpack-plugin&#39;);\n\nmodule.exports&nbsp;=&nbsp;{\n..\n&nbsp;&nbsp;&nbsp;&nbsp;output:&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;path:&nbsp;__dirname&nbsp;+&nbsp;&quot;/build&quot;,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;filename:&nbsp;&quot;bundle-[hash].js&quot;\n&nbsp;&nbsp;&nbsp;&nbsp;},\n&nbsp;&nbsp;&nbsp;...\n};</pre><p>现在用户会有合理的缓存了。</p><p><img class="image-loading"/></p><p>带hash值的js名</p><h4>去除<code>build</code>文件中的残余文件</h4><p>添加了<code>hash</code>之后，会导致改变文件内容后重新打包时，文件名不同而内容越来越多，因此这里介绍另外一个很好用的插件<code>clean-webpack-plugin</code>。</p><p><strong>安装</strong>：<br/><code>cnpm install clean-webpack-plugin --save-dev</code></p><p><strong>使用</strong>：</p><p>引入<code>clean-webpack-plugin</code>插件后在配置文件的<code>plugins</code>中做相应配置即可：</p><pre class="hljs undefined">const&nbsp;CleanWebpackPlugin&nbsp;=&nbsp;require(&quot;clean-webpack-plugin&quot;);\n&nbsp;&nbsp;plugins:&nbsp;[\n&nbsp;&nbsp;&nbsp;&nbsp;...//&nbsp;这里是之前配置的其它各种插件\n&nbsp;&nbsp;&nbsp;&nbsp;new&nbsp;CleanWebpackPlugin(&#39;build/*.*&#39;,&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;root:&nbsp;__dirname,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;verbose:&nbsp;true,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dry:&nbsp;false\n&nbsp;&nbsp;})\n&nbsp;&nbsp;]</pre><p>关于<code>clean-webpack-plugin</code>的详细使用可参考<a href="https://link.jianshu.com?t=https://github.com/johnagan/clean-webpack-plugin" target="_blank">这里</a></p><h3>总结</h3><blockquote><p>其实这是一年前的文章了，趁周末重新运行和修改了一下，现在所有的代码都可以正常运行，所用webpack基于最新的<code>webpack3.5.3</code>。希望依旧能对你有帮助。</p></blockquote><p>这是一篇好长的文章，谢谢你的耐心，能仔细看到了这里，大概半个月前我第一次自己一步步配置项目所需的Webpack后就一直想写一篇笔记做总结，几次动笔都不能让自己满意，总觉得写不清楚。其实关于Webpack本文讲述得仍不完全，不过相信你看完后已经进入Webpack的大门，能够更好的探索其它的关于Webpack的知识了。</p><p>欢迎大家在文后发表自己的观点讨论。</p><h2>更新说明</h2><blockquote><p>2017-12-11更新，修改<code>css module</code>部分代码及示例图片，<code>css module</code>真的非常好用，希望大家都能用上。</p></blockquote><blockquote><p>2017年9月18日更新，添加了一个使用<code>webpack</code>配置多页应用的demo,可以点击<a href="https://link.jianshu.com?t=https://github.com/zhangwang1990/blogs/tree/master/sources/MultiPageWebpackDemos" target="_blank">此处查看</a></p></blockquote><blockquote><p>2017年8月13日更新，本文依据<code>webpack3.5.3</code>将文章涉及代码完全重写，所有代码都在Mac上正常运行过。希望依旧对你学习<code>webpack</code>有帮助。</p></blockquote><blockquote><p>2017年8月16号更新：<br/>最近在Gitchat上将发起了一场关于webpack的分享，目的在于一起花最短的时间理解和学会webpack，感兴趣的童鞋可以微信扫描注册哈。</p><br/><p><img class="image-loading"/></p><p>webpack从入门到工程实践</p></blockquote><p><br/></p>', '2017-12-06', 'zackon', 1, 48, '1', 'IT', 28024);
INSERT INTO `article` (`id`, `name`, `description`, `content`, `time`, `author`, `support`, `watch`, `comment`, `type`, `wordNumber`) VALUES
(5, '五点起床的人，你过得真辛苦', '图片发自简书App文/一粒少女为什么明明可以放松玩乐的年纪，你偏偏选择为难自己，人生短短几十年，不享乐，你不会觉得对不起自己？像往常一样，七点半室友的闹钟准时响起，而此时的我包的严实，只有一双眼睛暴露在外面，手里提着室友们的早餐走向一片漆黑的寝室。伴随着闹钟的铃声，我把寝室的灯打开，室友们才陆陆续续的从床上爬了起来，“外面冷不冷啊？下雨了没有？”室友每天起来必问我的问题，因为只有我买早餐出去过。“', '<p><br/></p><p style="text-align: center;"><img class="" src="//upload-images.jianshu.io/upload_images/3637752-1af25077e3d41447.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/700"/></p><p>图片发自简书App</p><p>文/一粒少女</p><p><strong>为什么明明可以放松玩乐的年纪，你偏偏选择为难自己，人生短短几十年，不享乐，你不会觉得对不起自己？</strong><br/></p><p>像往常一样，七点半室友的闹钟准时响起，而此时的我包的严实，只有一双眼睛暴露在外面，手里提着室友们的早餐走向一片漆黑的寝室。</p><p>伴随着闹钟的铃声，我把寝室的灯打开，室友们才陆陆续续的从床上爬了起来，“外面冷不冷啊？下雨了没有？”室友每天起来必问我的问题，因为只有我买早餐出去过。</p><p>“外面挺冷的，风很大，你们多穿点衣服吧！”边说我边把她们的早餐放在她们的桌上，随后就坐在自己的位置，把之前没摘抄完的句子抄完。</p><p>室友们急急忙忙的刷牙洗脸，又是一个忙碌的早晨，室友王佳已经洗漱完毕，不用化妆的她已经坐在自己的位置上吃起了我带给她的早餐，面对我的方向。</p><p>“你今天是不是又五点钟起来的啊？”王佳边吃边问道，我一脸抱歉，“今天早上是不是声音大了吵醒了你？”只见王佳笑出声来，“不是的，是我被手机消息吵醒的，发现下面有灯。”</p><p>“那就是她啦，只有她才会在下面，没别人了。”正在镜子前化妆的另一个室友还没等王佳说完，就补了一句话，又接着化着她的眉毛。</p><p>“我看了看手机，发现才五点半，我想你应该又是五点起来的，后来我就继续睡我的觉了。”王佳把吃完的袋子扔进垃圾桶，用纸擦了擦嘴，表示早餐很满意。</p><p style="text-align:center"><img class="" src="//upload-images.jianshu.io/upload_images/3637752-0aba542c6a7060d1.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/700"/></p><p>图片发自简书App</p><p><strong>在这个世界上，总有人会对自律有些误解，认为自律的人往往过的很辛苦，其实真正自律的人，生活一定很美好，她们是打心里喜欢这种自律。</strong></p><p><strong>“你每天五点钟起来，过的真辛苦。</strong>”王佳用同情的眼神看着我，在她们的眼里，五点钟起床是她们永远的噩梦，除了大学军训有过几次，就再也不想过那种五点早起的生活。</p><p>这种五点早起的生活在她们的眼里，是一种及其不幸福的生活，很是辛苦，“我一点都不辛苦，很喜欢这种状态。”我笑着对着王佳说，以表示自己过的并不是她想象的那么辛苦。</p><p>我们的对话随着快要上课就这么结束了，走在路上，看着另一个室友边吃边赶着上课，我自己在想，五点钟起床一点都不辛苦，简直称的上幸福。</p><p>不用像室友一样，急匆匆的吃着早餐，赶着上课，可以提前就把早餐吃好，享受食物带来的幸福感，很多同学因为晚起，有的像室友一样边吃边走，有的干脆不吃。</p><p>对身体很不好，身体是革命的本钱，长期不吃早餐一定对身体不好，原来早起的人生真的如别人所说，赚翻了，受益的永远是自己，而我也加入了这只庞大的队伍。</p><p>记得以前早起，来了灵感就会时不时的利用早起的时间，当室友们沉睡在梦乡的时候，那个时候最适合自己做一些自己喜欢的事，而我时常用来写作。</p><p>有段时间灵感很多，利用早起的时间还做到了一段时间的日更，完成了自己一个日更小小的心愿，没灵感的时候，都会坐在书桌面前，摘抄自己喜欢的句子。</p><p>或是看看自己喜欢的书籍，不想看书的时候就在下面做一些拉伸运动，让一天都充满精神，这些都是我在五点起床之后会做的事情，而且都是自己喜欢做的事情。</p><p>做它们的时候，我觉得五点起来一点都不辛苦，而且很幸福，周围安安静静，你也可以安安静静的做自己喜欢的事情，没别人口中的那么辛苦。</p><p><img class="image-loading"/></p><p>图片发自简书App</p><p><br/></p><p><strong>自律对我来说，不仅是自由，更是快乐。</strong></p><p>以前的我，很佩服那些五点就能起床的人，在自己的眼里，甚至认为自己这辈子都不可能成为这么自律的人。后来为了加入到这支队伍。</p><p>我尝试着五点起床，跟很多人一样，刚开始并不能做到五点起床，睡觉之前设了很多闹钟，但都以失败告终，我想可能是因为自己急于求成。</p><p>我慢慢的试着七点起变成六点半，六点半起变成六点，这样一步一步慢慢来，最终我的身体形成了生物钟，基本都在五点左右起床。</p><p>因为早起的原因，我也形成了早睡，从此之后，我戒掉了熬夜的习惯，成为了宿舍里唯一一个早睡早起的人，室友刚开始老是调侃，说我过的跟个老人家样的。</p><p>当他们熬夜打游戏，追剧的时候，我在睡觉，当他们睡觉的时候，我在学文章或是做自己喜欢的事情，当他们起床的时候，我已经享受完了自己的早餐。</p><p>我知道刚开始改变自己，养成自律习惯的时候，花了很多精力。但是当你长期坚持下来，你会发现，原来自己也可以做到，原来也没那么困恼。</p><p>长期坚持下来，早起已经成了习惯，越来越觉得自己过的很幸福。因为自己已经在向优秀的人慢慢靠近。自己也非常享受早起后的时光。</p><p>对我来说，早起很大程度地决定了我一天的精神状态！因为早起总会让我在主观上感觉时间好像更多了，所以早上起来都会为自己今天有大把的时间做事儿而感到开心，做起事情更加舒心。</p><p>早上的效率的确是很高，因为没有杂念，没有干扰，可以很好的集中注意力在一件事件上面，不用担心室友看电视的声音过大，从而影响到自己。</p><p>其实当听到室友说自己很辛苦的是时候，我即吃惊又觉得如果是以前的我，我甚至也会认为自己很辛苦。可是当自己真正自律的时候，才懂得自律带来的快乐。</p><p><strong>纵观身边那些极度自律的人，他们的生活真的很辛苦吗？你看到他们6点锻炼、7点晒早餐，每天安心工作，过自己的生活，你不曾有一点点羡慕吗？</strong></p><p><strong>五点钟早起的人生并不辛苦，能做自己喜欢的事，简直就是赚到了，它比你想象中要幸福的多，说真的，五点钟就起来的人，一点也不辛苦。</strong></p><p><strong>（我是一粒茫茫，人海中的一粒）</strong></p><p><img class="image-loading"/></p><p><br/></p><p><br/></p><p><br/></p>', '2018-01-09', 'admin', 1, 10, '1', 'note', 2074),
(6, '世界是不公平的，然后呢？', '图|网络01“这个世界并不是公平的，你要学着去习惯它。”这句话，我是从郭敬明的书里看到的。我当时看着这句话心情有点复杂，觉得他说的很冷漠，不过世界不公平确实是一个事实。就像你郭敬明拍的电影，部部烂片，却每部都票房大卖。而那些有良心有情怀的电影人，也许拍一辈子，票房都没有你的零头高。这公平吗？不公平这个事实从我们一出生就注定了。条条大路通罗马，而有些人就生在罗马。我们要怎么办？能怎么办？哭天喊地，怨', '<p style="text-align:center"><img class="" src="//upload-images.jianshu.io/upload_images/9308342-019aed767b3492e5.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/700"/></p><p style="text-align: center;">图|网络</p><p><strong>01</strong></p><p><strong>“这个世界并不是公平的，你要学着去习惯它</strong>。”这句话，我是从郭敬明的书里看到的。</p><p>我当时看着这句话心情有点复杂，觉得他说的很冷漠，不过世界不公平确实是一个事实。就像你郭敬明拍的电影，部部烂片，却每部都票房大卖。而那些有良心有情怀的电影人，也许拍一辈子，票房都没有你的零头高。这公平吗？</p><p>不公平这个事实从我们一出生就注定了。<strong>条条大路通罗马，而有些人就生在罗马。</strong>我们要怎么办？能怎么办？哭天喊地，怨天尤人？</p><p>有意思的是大多数人口中的不公平，其实并不是真正的不公平。</p><p>你努力，有可能你成功，也有可能你失败，失败了你说不公平，这是扯谈。但有一种情况是不管你怎么努力，都不会成功，从一开始就注定了失败。</p><p>比如之前发生的某些单位为某些人量身定做招聘条件这种事情，如果你是这场招聘中的其他人，那才叫不公平。</p><p><strong>不过以绝大多数人的努力程度而言，谈公平，骂不公平，其实就是个笑话。</strong>弱者跌倒了，不会反思自己，只会夸大让自己跌倒的原因，来为自己的失败找理由。</p><p><strong>命乃弱者之借口，运乃强者的谦词。</strong>这句话说得很是通透。命不好，运不好，不公平这些词语多数时候都是弱者的标配理由。</p><p><strong>02</strong>&nbsp;</p><p>今年考研刚结束时，关于考研数学泄题一事，传得沸沸扬扬。这个事情为什么能引起这么大的关注，让各大媒体和那些不考研的吃瓜群众都坐不住了？</p><p>原因是这件事情如果坐实，真的泄题了，确实有人能事先拿到了考研题目，那这就是真正的不公平。这件事情最可怕的地方是，有一些人可以无视绝多数人的努力直接凭借权力就比你走得更远。</p><p>事情爆出来以后，我的一个考研小伙伴一边给发相关的新闻推送，一边给我哭诉。说太不公平了，这个世界太黑暗了。她给我巴拉巴拉的说了一堆，其中不乏极端的言论。</p><p>我知道她情况，我忍不住说，这件事情其实对你来说，某种程度上来讲是没有影响的。因为你本来就过不了线啊，你和那些通过“泄题”过了线的人根本没机会成为竞争的对手。</p><p>她沉默了一会儿，给我说，那和我同样本来就过不了线的人，通过得到题目过线了，这公平吗？</p><p>我说，是啊，这不公平。只是你能成为这一部分人吗？你有这个运气吗？</p><p>如果你没有，除了努力，你有什么办法？你给我说，你能怎么办？</p><p>她没再说话，我也觉得自己说得过火了。</p><p>不过也许事实就是这样。有人通过用兴奋剂拿到了第一名，如果你是有实力争第一名的人，这对你来说是极大的不公平。但如果不管别人用不用兴奋剂，不管谁是第一名，你都是倒数第一，那这件事情对你有表面上的影响吗？</p><p>我上面这些话充满了弱肉强食，森林法则的残酷味道。你可以反驳我，可以说这样一个不公平的社会是有问题的，我自己也承认这是有问题的。</p><p>但你不能否认，<strong>有人确实能通过不正当手段获取更多的资源，有人确实能不遵守游戏规则，现实生活也有“人民币玩家”。</strong></p><p>只是，你我一般不会是这样的人。</p><p><img class="image-loading"/></p><p>图|网络</p><p><strong>03</strong></p><p>过去几年，我走了很多地方，经历了很多事情。我看到有人遇到一点儿困难就哭天喊地，也看到有人除了怪社会其他啥都不行。我发现了弱者最显著的特征就是习惯性把失败归于外因，而从不考虑自身是否有问题。</p><p>我也发现，很多穷的人，都懒。他们之所以没钱，不怪社会不公平，不怪国家扶持力度不够，而怪他们自己。他们除了抱怨，除了仇富，除了骂这个社会不公平，他们不会在自己的身上找原因。</p><p><strong>一个社会，如果不管你怎么努力都成功不了，那这个社会就错了。但如果你还没怎么努力，就骂这个社会，那你就错了。</strong></p><p>我想起在大学时，我认识的一个朋友。他说毕业了要去读研，要去中国最好的政法大学看一下。</p><p>他只是个二本学生，我告诉他，考过这所大学的人都说这个学校歧视本科不是985,211的学生。所以即使过了初试，复试也难。而且他们每年的研究生名额有很大一部分是留给保研的，剩下的名额竞争太大。</p><p>他没丧气，只是说有心理准备，不管怎么样他都要放手一搏。</p><p>结果他考研的总分过线了，但有一科的单科分数差了三分。我们都替他惋惜，还有朋友说如果他是少数民族就好了，有5分的单科分数照顾分。</p><p>他心态倒也不错，休息了几天就接着准备下一年的研究生考试了。第二年，他高分通过，以一个本科是二本学生的身份进入了中国最好的政法大学学习。</p><p>我们朋友几个都高兴，在庆功宴上，我们说起他第一次没考上的遗憾。他说那次不怪其他的，只怪自己不够优秀。</p><p>我心里感慨，这种心态这种想法的人，说得俗一点，他不成功谁能成功？</p><p><img class="image-loading"/></p><p>图|网络</p><p><strong>04</strong>&nbsp;</p><p><strong>有人说这个世界上唯一公平的是时间，不管你有多少财富，有多高的地位，每个人都只有24小时。</strong></p><p>但就是这24小时，就决定了你其他的一切。如果你每天花了很多时间去玩手机，玩游戏，去当键盘侠……那当你看到别人功成名就的时候，请不要说这个社会不公平，因为你没有资格。</p><p>说得理想一点，其实你是有资格的。但实质上呢？没有人在意。因为你太弱了，你说话没有人听。“大象”看到你，踩死你和踩死一只蚂蚁没有区别。</p><p>这段时间，我自己写的很多文章，被别人原封不动的抄袭了。抄袭者除了换了作者名字，其他一切都没换。</p><p>我看了一眼就没管了，维权成本太大，得不偿失。因为我太弱了，没有人在意我的态度。</p><p>我喜欢的作家跳舞说没有人敢抄袭他的文章，因为他名气太大，因为他的背后是腾讯集团，想抄他文章的人除非不想在文娱这个领域混了。</p><p>我想有一天我能成为强大的人，我想有一天我能在这个充满了不公平的世界上有一个立足之地。</p><p>我知道你对这样的世界很失望，因为，我也一样。不过罗曼·罗兰说：<strong>“世界上只有一种真正的英雄主义，就是认清了生活的真相后还依然热爱它。”</strong></p><p>愿我们都能成为自己的英雄。<br/></p><p>(完)</p><p><br/></p>', '2018-01-09', 'admin', 0, 1, '0', 'note', 2213),
(7, '学IT技术有前途吗？刚上大学有学习IT技术的必要吗？', 'IT行业是目前我国最火爆的热门岗位，发展前景十分的明朗，在“互联网+”持续升温的现在，很多人都想投身IT行业，学习高端IT技术，转变为IT工程师。作为高端IT技术咨询师，总是会被学生咨询这些问题：学习IT技术有前途吗？以后行业的前景好吗？刚上大学有学习IT技术的必要吗？接下来从以下几大方面来解读一下IT技术、行业的优势和学习的必要。一、IT技术的优势想要投身于互联网行业的人们不难发现，高端IT技术', '<p>IT行业是目前我国最火爆的热门岗位，发展前景十分的明朗，在“互联网+”持续升温的现在，很多人都想投身IT行业，学习高端IT技术，转变为IT工程师。作为高端IT技术咨询师，总是会被学生咨询这些问题：学习IT技术有前途吗？以后行业的前景好吗？刚上大学有学习IT技术的必要吗？</p><p style="text-align:center"><img class="" src="//upload-images.jianshu.io/upload_images/6357390-c94b3db88205f9f2.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/481"/></p><p>接下来从以下几大方面来解读一下IT技术、行业的优势和学习的必要。</p><blockquote><p>一、IT技术的优势<br/></p></blockquote><p>想要投身于互联网行业的人们不难发现，高端IT技术是求职简介中HR最为关注的点，IT技术是否过硬，掌握什么IT技术是最基本的评判标准。</p><p>谈到IT技术就得从主流需求说起，云计算、大数据、Java、Linux、数据库、嵌入式、VR等都是目前为止关注度与需求度最高的，在各行各业全面打响的云计算、大数据战争，不正说明了这个问题吗？</p><blockquote><p>二、IT行业的前景<br/></p></blockquote><p>IT行业无论是就业前景还是发展前景，在众多行业中都是榜上有名，我国目前IT人才的缺口极大，即使IT人才填补趋势上涨，也满足不了快速发展的互联网企业对于IT人才的需求。</p><p>IT行业的前景十分明朗，稍具规模的互联网企业都会有自己的IT部门，企业里如果项目细分，每个部门又会有专门的技术划分，这样一来一个公司所需要的程序员数量还是很可观的。</p><blockquote><p>三、IT技术学习的必要<br/></p></blockquote><p>一个人没有一技之长在社会上是生存不下来的。</p><p>能力是展现自身的一种手段，没有技术的傍身在激烈的竞争中，人们是无法立足于职场的。学习一门IT技术不仅是对于自身学识的提升，更是对于未来前瞻性的展望。</p><p>IT技术的优越性在于互联网科技的快速发展，各行各业都在努力与高科技搭上轨道，这个时代企业不得不依赖于IT技术的支撑。</p><p>国家政策的推动给IT技术带来了新风，“一带一路”的建设也在为IT行业开阔新市场，打造新格局。高新区、产业园的建立让更多人看到了国家对IT技术、行业的扶持力度。</p><p>综上所述，认识到IT行业的前景以及IT技术的重要性，才是走上人生高薪梦的基础。刚上大学的同学们如果看到了这里应该早做步入IT行业的准备，“快人一步”才是在社会上立足的优势。</p><p>那么如何做到稳定、深入的学习IT技术呢？</p><p>欢迎私信小编哦！</p><p><br/></p>', '2018-01-09', 'admin', 0, 0, '0', 'IT', 867),
(8, '真健身和假健身的6大区别，你是真健身吗？', '全民健身的时代，人人都想拿起哑铃，健健身，人人都想跑跑步减减脂，那么你健身为了什么？是为了健康，还是为了身材？是出于好奇还是出于对别人身材的嫉妒？健身这个概念，你真的了解吗？还是简简单单的只是认为动起来就可以了？今天就来见证一下你自己是真健身还是假健身吧~一、是否拥有随时训练的“健身房”对于真正的健身者来说，他们不管是否拥有健身房的条件，有，就把它发挥到最好。没有，就算是只有2平米的空间，他们也能', '<p>全民健身的时代，人人都想拿起哑铃，健健身，人人都想跑跑步减减脂，那么你健身为了什么？</p><p style="text-align:center"><img class="" src="//upload-images.jianshu.io/upload_images/9532555-b00099db3132ec29.gif?imageMogr2/auto-orient/strip%7CimageView2/2/w/400"/></p><p>是为了健康，还是为了身材？是出于好奇还是出于对别人身材的嫉妒？健身这个概念，你真的了解吗？还是简简单单的只是认为动起来就可以了？</p><p style="text-align: center;"><img class="" src="//upload-images.jianshu.io/upload_images/9532555-85f93f04cb1ca18e.gif?imageMogr2/auto-orient/strip%7CimageView2/2/w/499"/></p><p>今天就来见证一下你自己是真健身还是假健身吧~</p><p><strong>一、是否拥有随时训练的“健身房”</strong></p><p>对于真正的健身者来说，他们不管是否拥有健身房的条件，有，就把它发挥到最好。</p><p style="text-align: center;"><img class="" src="//upload-images.jianshu.io/upload_images/9532555-49e78b0d939229e4.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/595"/></p><p>没有，就算是只有2平米的空间，他们也能把自己练到力竭！</p><p style="text-align:center"><img class="" src="//upload-images.jianshu.io/upload_images/9532555-ebc3abb89d131553.gif?imageMogr2/auto-orient/strip%7CimageView2/2/w/500"/></p><p>无论是在家庭还是在户外，总有适合他们的健身方式，随时准备徒手健身，这就是真健身的人！</p><p style="text-align:center"><img class="" src="//upload-images.jianshu.io/upload_images/9532555-92619d567f5a836e.gif?imageMogr2/auto-orient/strip%7CimageView2/2/w/300"/></p><p>而对于伪健身者而言，没有标准的健身房，家里没有器械，户外环境太差……总是他们不健身的借口！</p><p style="text-align:center"><img class="" src="//upload-images.jianshu.io/upload_images/9532555-f82637db0760f1d7.gif?imageMogr2/auto-orient/strip%7CimageView2/2/w/500"/></p><p><strong>二、是否有时间健身</strong></p><p>真正的健身者每天能活出25个小时的感觉，无论有多忙，他们总能有时间健身！</p><p style="text-align:center"><img class="" src="//upload-images.jianshu.io/upload_images/9532555-253f7a180bb725b7.gif?imageMogr2/auto-orient/strip%7CimageView2/2/w/315"/></p><p>就算是朝9晚11又怎样？就算要加班又怎样？就算外出工作，他们也会做几组俯卧撑，健身仿佛这对他们是一种修正，随时可以进行。</p><p style="text-align:center"><img class="" src="//upload-images.jianshu.io/upload_images/9532555-05689c49d633c6c1.gif?imageMogr2/auto-orient/strip%7CimageView2/2/w/563"/></p><p>别人说健身者总是有空健身，而只有健身者才知道，自己健身的时间，是别人打游戏的时间，是别人无聊刷朋友圈的时间，是别人抱怨社会不公的时间。时间总是挤出来的~</p><p style="text-align:center"><img class="" src="//upload-images.jianshu.io/upload_images/9532555-5b784adc293c2eb2.gif?imageMogr2/auto-orient/strip%7CimageView2/2/w/500"/></p><p>伪健身者们，对健身只有一个字：我忙，仿佛整个世界都没他们忙……</p><p style="text-align:center"><img class="" src="//upload-images.jianshu.io/upload_images/9532555-53432fc2d1f7b7c9.gif?imageMogr2/auto-orient/strip%7CimageView2/2/w/568"/></p><p><strong>三、训练是否有头绪</strong></p><p>你是“即兴”健身者吗？随时想到什么动作就来什么动作？</p><p>真正的健身者，他们的训练永远都是“有备而来”。</p><p style="text-align:center"><img class="" src="//upload-images.jianshu.io/upload_images/9532555-bf29448ca123fc80.gif?imageMogr2/auto-orient/strip%7CimageView2/2/w/488"/></p><p>在训练前他们就精心编排好了训练，一次一个小时左右，目的是专注的分化训练或者全身减脂，合理的动作安排、组数次数，还要控制好休息时间。</p><p style="text-align:center"><img class="" src="//upload-images.jianshu.io/upload_images/9532555-2fd1d3ba5361e86f.gif?imageMogr2/auto-orient/strip%7CimageView2/2/w/500"/></p><p>一切都按照最合理最有逻辑的方式，给肌肉最高效的刺激。</p><p style="text-align:center"><img class="" src="//upload-images.jianshu.io/upload_images/9532555-5a81c4174210eff7.gif?imageMogr2/auto-orient/strip%7CimageView2/2/w/500"/></p><p>对于伪健身者而言，没规律的来到健身房，没想法的开始运动。看到什么器械就胡练一通，拍个照，秀个朋友圈，训练结束，洗澡回家。毫无计划可言。</p><p style="text-align:center"><img class="" src="//upload-images.jianshu.io/upload_images/9532555-413267b84bf64b3e.gif?imageMogr2/auto-orient/strip%7CimageView2/2/w/500"/></p><p><strong>四、训练是否依季节而变</strong></p><p>冬练三九，夏练三伏，真正喜欢健身的人，充分利用季节训练是他们的强项，冬天脂肪代谢高，适合减脂，他们就冬天跑步、划船。</p><p style="text-align:center"><img class="" src="//upload-images.jianshu.io/upload_images/9532555-70cfac234b8af286.gif?imageMogr2/auto-orient/strip%7CimageView2/2/w/490"/></p><p>夏天肌肉代谢旺盛，分化训练，增肌。他们会根据自身情况和季节结合为自己制定计划。</p><p><img class="image-loading"/></p><p>而对于伪健身者来说，冬天太冷、不想出门，不想运动只想在被窝里暖着。夏天太热，不想流汗，太热了健身岂不是更热？算了还是等下个季节再健身吧！就是在借口中不健身。</p><p><strong>五、健身与健康、健身与体能</strong></p><p>真正的健身者知道，健身≠健康≠身体素质，他们不会单纯的撸铁，他们也会进行户外运动，踏青郊游、足球篮球、游泳划船，他们都会参与。</p><p><img class="image-loading"/></p><p>因为他们知道，一个均衡的身体，才是健康的含义，而伪健身者，只追求肌肉块大小，不去考虑平衡的身体，最终只会引发伤病。</p><p><img class="image-loading"/></p><p><strong>六、健身与饮食</strong></p><p>健身者知道饮食的重要，饮食重在营养均衡，搭配到位，而不是大快朵颐，暴饮暴食。也知道自己在哪个期间应该如何安排自己的饮食。</p><p><img class="image-loading"/></p><p>而伪健身者只会说，“吃饱了才有力气减肥”，“我练的那么累多吃点没事儿的”……如果在减脂期，当摄入量大于运动消耗量时，你可能会更胖哦~</p><p><img class="image-loading"/></p><p><img class="image-loading"/></p><p>这只是真假健身的一部分表现，无论大家是真想健身还是假想健身，只要愿意动起来都是好的！有胜于无，但是一定要记得运动前后拉伸，千万别伤了身体哦~你，是真健身，还是假健身？</p><p><br/></p>', '2018-01-09', 'admin', 0, 1, '0', 'fitness', 1258),
(9, '微信“跳一跳”：玩的是小游戏，悟的是大道理！', '图片来自网络01近日，微信推出一款小程序游戏“跳一跳”，深受用户喜爱。我一口气玩了100多把，得分却没有突破100，看着排行榜上遥遥领先的好友，那颗不服输的心再次燃起斗志，战战兢兢跳到凌晨三点，终于获得200多分，但排名还是靠后。很快，我想到了一个让自己稳坐朋友圈榜首的方法，那就是把得分比自己高的好友都删掉。可这样做只是掩耳盗铃，而别人能拿高分，应该是找到了什么技巧，这个游戏的设计不会只是一步得一', '<p style="text-align:center"><img class="" src="//upload-images.jianshu.io/upload_images/1442902-009f7b3b35f0d3d5.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/700"/></p><p style="text-align: center;">图片来自网络</p><p><strong>01</strong><br/></p><p>近日，微信推出一款小程序游戏“跳一跳”，深受用户喜爱。</p><p>我一口气玩了100多把，得分却没有突破100，看着排行榜上遥遥领先的好友，那颗不服输的心再次燃起斗志，战战兢兢跳到凌晨三点，终于获得200多分，但排名还是靠后。</p><p>很快，我想到了一个让自己稳坐朋友圈榜首的方法，那就是把得分比自己高的好友都删掉。</p><p>可这样做只是掩耳盗铃，而别人能拿高分，应该是找到了什么技巧，这个游戏的设计不会只是一步得一分这么蠢。继续摸索一番后，果然让我找到了一些快速加分的小窍门。</p><p>连续跳到中心点，可以加2、4、6、8、10分，一直累计，<strong>按等差数列增长，但前提是你要站对位置。</strong></p><p style="text-align:center"><img class="" src="//upload-images.jianshu.io/upload_images/1442902-814f89d31daf7be3?imageMogr2/auto-orient/strip%7CimageView2/2/w/640"/></p><p>跳到井盖盒子上，停留到听到冲水的声音，可以额外加5分。</p><p><img class="image-loading"/></p><p>跳到魔方盒子上，停留到魔方转动一圈，可以额外加10分。</p><p><img class="image-loading"/></p><p>跳到徐记士多盒子上，停留到便利店的门打开，可以额外加15分。</p><p><img class="image-loading"/></p><p>跳到唱片盒子上，停留到音乐声响起，可以加30分。</p><p><img class="image-loading"/></p><p><strong>02</strong></p><p><strong>我们生活在一个竞争激烈，压力大得喘不过气，时间被切碎的时代。</strong></p><p>自从智能手机普及以后，我们的世界早已分崩离析，每个人都漂浮在时间的碎片里。</p><p>我们已经无法阅读一篇不配图的长文，无法读完一本纸质书，经常忘记上一秒想要做的事情，因为想不起某个名字又无法“百度一下”而抓狂。</p><p><strong>只要作者有强大的说服力，每一个公众号都像邪教。</strong>那些不同的声音，像不同方向的风，将你变成一株摇摆不定的草。</p><p>它们一会儿让你向左，一会儿让你向右，一会儿让你往前，一会儿让你往后。你感觉自己一直在走，其实你只是在原地周旋，并没有进步。</p><p>那些你觉得好有道理的道理，并没有真正引领你，它们只是在迎合你，迎合你内心原有的价值、期待，<strong>你仍是你，并没有变好。</strong></p><p>我们心甘情愿地被手机绑架，每时每刻都在忙着聊八卦、刷朋友圈、观影追剧，长此以往导致注意力极度涣散，精力无法集中在一个点上。</p><p><strong>大脑不堪重负，就用健忘作为抗议，身体受不了折腾，就用掉发来提醒你。</strong></p><p><strong>03</strong></p><p>“跳一跳”的玩法很简单，每个人接触的时候，都会觉得自己可以轻易拿到高分。然而只要上手，就会迅速感到挫败，哪怕拿10分都非常困难。</p><p>由于自我的骄傲，我们根本无法接受这个事实，为了不断挑战自己，就会乐此不疲地跳下去。</p><p>在经过最初的尝试之后，我们很快就拿到了100分，然后又产生一个新的误解：游戏本身没有任何难度，我只需要小心一点，拿200分应该也不在话下。</p><p><strong>趋利避害是人的本能，利越大，持续时间越长，越放不下。</strong>“跳一跳”的每一跳都有得分，每次得分都是一次小小的奖励，分数累计，奖励翻倍，人就更容易获得成就感。</p><p>在你玩游戏的十分钟里，每分每秒都能体会到快感，毫无间断，且仅仅用手指点击屏幕就能获得。<strong>付出的只是小小的时间成本，得到的却是大大的心理满足。</strong></p><p>玩久了，你也会懊悔虚度光阴，关掉游戏投入工作。十分钟后焦头烂额，急躁的情绪与游戏的畅快形成鸿沟般的对比，你又会抽空打开游戏跳起来。</p><p>但这个游戏的本质，是要训练你的专注力，你只有非常专心，才能获得手指尖微妙的触感，通过连续叠加的得分，创造一个又一个高分记录。</p><p><strong>你那么努力，是为了在更高的层次遇见更少的人。</strong></p><p><img class="image-loading"/></p><p><br/></p><p><strong>04</strong></p><p>“跳一跳”采取的是立即反馈的方式，让你每跳一步都可以爽到。跳不到尽头没关系，多一跳就多一次满足。</p><p>胡适说“怕什么真理无穷，进一寸有一寸的欢喜”，想来在这也是适用的。</p><p>“跳一跳”还接入了好友排行数据，让玩家有多维度目标，既要超越自己，也要超越好友。<strong>为了占领榜首不懈努力，和朋友较量分出高下的激励，牵着玩家在社交圈里杀出一条血路。</strong></p><p>每一轮名次上升，似几十次冲锋终将战旗插在敌人的高地，脑中有恢弘音乐作背景，心中千军万马为你摇旗呐喊。<strong>何人又能抵挡做胜利将军的瘾呢？</strong></p><p>然而，在不断跳的过程中，你很快又会遇到自己的瓶颈，分数停滞在某一个特意的数值，甚至后退。你的个人记录是你最好的运气和最长的专注时间加权的结果，但<strong>你只是个凡人，总会分心和走神。</strong></p><p>入戏后的你，内心是通明的，周围的一切都是浮云，你的心念集中在眼前的软体小人上，带着一种别样的茫然，仿佛悬浮在透明的温水中。</p><p>你的思维慢慢停顿下来，几乎是靠下意识或者本能在玩这个游戏。你会发现自己无喜无悲，拥有一颗柔软而富有弹性的心，整个世界变得润泽，略带一点伤感。</p><p><strong>风可以吹走一张白纸，却不能吹走一只蝴蝶，因为生命的力量在于不顺从。</strong></p><p><strong>05</strong></p><p>刷朋友圈的时候，看到很多写作的朋友都在晒“跳一跳”的得分，或者分享玩游戏的心得。</p><p>伊心说：“我妹妹告诉我这个游戏可以减压我才决定玩的，然而玩了两个小时，时而怒吼，时而捶床，整个人都快疯了。”</p><p>老妖说：“我总结为，我们完全无法面对任何竞争，不能赢就会崩溃。”</p><p>可是，这个游戏拿高分的诀窍，就是千万别去看分数，别想着赢，别因为看到一个可以加分的盒子而激动，它迫使你以一念代万念，专注地跳好当前的每一步。</p><p><strong>任何时候只要你沉下心来做一件事，就一定会有收获。你的负担将变成礼物，你受的苦将照亮你的路。</strong></p><p>“跳一跳”的那个橡皮小人，是英文字母的“i”，也是一次次跌倒，又一次次重来的我们自己。</p><p><strong>将难题设计成通关，生活不过是一场游戏，既然注定有人排在榜首，为什么不能是你？</strong></p><p><br/></p><p><br/></p><p><br/></p><p><br/></p>', '2018-01-10', 'huahua', 0, 21, '0', 'note', 2053),
(10, 'CSS Modules 用法教程', '学过网页开发就会知道，CSS 不能算编程语言，只是网页样式的一种描述方法。\n\n\n                                    为了让 CSS 也能适用软件工程方法，程序员想了各种办法，让它变得像一门编程语言。从最早的Less、SASS，到后来的 PostCSS，再到最近的 CSS in JS，都是为了解决这个问题。本文介绍的 CSS Modules 有所不同。它不是将 C', '<p><!-- div class="asset-body" --></p><p>学过网页开发就会知道，CSS 不能算编程语言，只是网页样式的一种描述方法。</p><p><!-- /div -->\n\n\n &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<!-- div id="more" class="asset-more" --></p><p>为了让 CSS 也能适用软件工程方法，程序员想了各种办法，让它变得像一门编程语言。从最早的Less、SASS，到后来的 PostCSS，再到最近的 CSS in JS，都是为了解决这个问题。</p><p style="text-align:center"><img src="http://www.ruanyifeng.com/blogimg/asset/2016/bg2016061001.png" alt="" title=""/></p><p>本文介绍的 <a href="https://github.com/css-modules/css-modules" target="_blank">CSS Modules</a> 有所不同。它不是将 CSS 改造成编程语言，而是功能很单纯，只加入了局部作用域和模块依赖，这恰恰是网页组件最急需的功能。</p><p>因此，CSS Modules 很容易学，因为它的规则少，同时又非常有用，可以保证某个组件的样式，不会影响到其他组件。</p><p style="text-align:center"><img src="http://www.ruanyifeng.com/blogimg/asset/2016/bg2016061002.png" alt="" title=""/></p><h2>零、示例库</h2><p>我为这个教程写了一个<a href="https://github.com/ruanyf/css-modules-demos" target="_blank">示例库</a>，包含六个Demo。通过它们，你可以轻松学会CSS Modules。</p><p>首先，克隆示例库。</p><blockquote><pre class=" language-bash">$&nbsp;git&nbsp;clone&nbsp;https://github.com/ruanyf/css-modules-demos.git</pre></blockquote><p>然后，安装依赖。</p><blockquote><pre class=" language-bash">$&nbsp;cd&nbsp;css-modules-demos\n$&nbsp;npm&nbsp;install</pre></blockquote><p>接着，就可以运行第一个示例了。</p><blockquote><pre class=" language-bash">$&nbsp;npm&nbsp;run&nbsp;demo01</pre></blockquote><p>打开浏览器，访问<code>http://localhost:8080</code>，查看结果。其他示例的运行方法类似。</p><h2>一、局部作用域</h2><p>CSS的规则都是全局的，任何一个组件的样式规则，都对整个页面有效。</p><p>产生局部作用域的唯一方法，就是使用一个独一无二的<code>class</code>的名字，不会与其他选择器重名。这就是 CSS Modules 的做法。</p><p>下面是一个React组件<a href="https://github.com/ruanyf/css-modules-demos/blob/master/demo01/components/App.js" target="_blank"><code>App.js</code></a>。</p><blockquote><pre class=" language-javascript">import&nbsp;React&nbsp;from&nbsp;&#39;react&#39;;import&nbsp;style&nbsp;from&nbsp;&#39;./App.css&#39;;export&nbsp;default&nbsp;()&nbsp;=&gt;&nbsp;{&nbsp;&nbsp;return&nbsp;(&nbsp;&nbsp;&nbsp;&nbsp;&lt;h1&nbsp;className={style.title}&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Hello&nbsp;World&nbsp;&nbsp;&nbsp;&nbsp;&lt;/h1&gt;&nbsp;&nbsp;);};</pre></blockquote><p>上面代码中，我们将样式文件<a href="https://github.com/ruanyf/css-modules-demos/blob/master/demo01/components/App.css" target="_blank"><code>App.css</code></a>输入到<code>style</code>对象，然后引用<code>style.title</code>代表一个<code>class</code>。</p><blockquote><pre class=" language-css">.title&nbsp;{&nbsp;&nbsp;color:&nbsp;red;}</pre></blockquote><p>构建工具会将类名<code>style.title</code>编译成一个哈希字符串。</p><blockquote><pre class=" language-markup">&lt;h1&nbsp;class=&quot;_3zyde4l1yATCOkgn-DBWEL&quot;&gt;\n&nbsp;&nbsp;Hello&nbsp;World&lt;/h1&gt;</pre></blockquote><p><code>App.css</code>也会同时被编译。</p><blockquote><pre class=" language-css">._3zyde4l1yATCOkgn-DBWEL&nbsp;{&nbsp;&nbsp;color:&nbsp;red;}</pre></blockquote><p>这样一来，这个类名就变成独一无二了，只对<code>App</code>组件有效。</p><p>CSS Modules 提供各种<a href="https://github.com/css-modules/css-modules/blob/master/docs/get-started.md" target="_blank">插件</a>，支持不同的构建工具。本文使用的是 Webpack 的<a href="https://github.com/webpack/css-loader#css-modules" target="_blank"><code>css-loader</code></a>插件，因为它对 CSS Modules 的支持最好，而且很容易使用。顺便说一下，如果你想学 Webpack，可以阅读我的教程<a href="https://github.com/ruanyf/webpack-demos" target="_blank"><code>Webpack-Demos</code></a>。</p><p>下面是这个示例的<a href="https://github.com/ruanyf/css-modules-demos/blob/master/demo01/webpack.config.js" target="_blank"><code>webpack.config.js</code></a>。</p><blockquote><pre class=" language-javascript">module.exports&nbsp;=&nbsp;{\n&nbsp;&nbsp;entry:&nbsp;__dirname&nbsp;+&nbsp;&#39;/index.js&#39;,\n&nbsp;&nbsp;output:&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;publicPath:&nbsp;&#39;/&#39;,\n&nbsp;&nbsp;&nbsp;&nbsp;filename:&nbsp;&#39;./bundle.js&#39;&nbsp;&nbsp;},\n&nbsp;&nbsp;module:&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;loaders:&nbsp;[&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;test:&nbsp;/.jsx?$/,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;exclude:&nbsp;/node_modules/,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;loader:&nbsp;&#39;babel&#39;,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;query:&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;presets:&nbsp;[&#39;es2015&#39;,&nbsp;&#39;stage-0&#39;,&nbsp;&#39;react&#39;]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;test:&nbsp;/.css$/,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;loader:&nbsp;&quot;style-loader!css-loader?modules&quot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},&nbsp;&nbsp;&nbsp;&nbsp;]&nbsp;&nbsp;}};</pre></blockquote><p>上面代码中，关键的一行是<code>style-loader!css-loader?modules</code>，它在<code>css-loader</code>后面加了一个查询参数<code>modules</code>，表示打开 CSS Modules 功能。</p><p>现在，运行这个Demo。</p><blockquote><pre class=" language-bash">$&nbsp;npm&nbsp;run&nbsp;demo01</pre></blockquote><p>打开 http://localhost:8080 ，可以看到<a href="http://ruanyf.github.io/css-modules-demos/demo01/" target="_blank">结果</a>，<code>h1</code>标题显示为红色。</p><h2>二、全局作用域</h2><p>CSS Modules 允许使用<code>:global(.className)</code>的语法，声明一个全局规则。凡是这样声明的<code>class</code>，都不会被编译成哈希字符串。</p><p><a href="https://github.com/ruanyf/css-modules-demos/blob/master/demo02/components/App.css" target="_blank"><code>App.css</code></a>加入一个全局<code>class</code>。</p><blockquote><pre class=" language-css">.title&nbsp;{&nbsp;&nbsp;color:&nbsp;red;}:global(.title)&nbsp;{&nbsp;&nbsp;color:&nbsp;green;}</pre></blockquote><p><a href="https://github.com/ruanyf/css-modules-demos/blob/master/demo02/components/App.css" target="_blank"><code>App.js</code></a>使用普通的<code>class</code>的写法，就会引用全局<code>class</code>。</p><blockquote><pre class=" language-javascript">import&nbsp;React&nbsp;from&nbsp;&#39;react&#39;;import&nbsp;styles&nbsp;from&nbsp;&#39;./App.css&#39;;export&nbsp;default&nbsp;()&nbsp;=&gt;&nbsp;{&nbsp;&nbsp;return&nbsp;(&nbsp;&nbsp;&nbsp;&nbsp;&lt;h1&nbsp;className=&quot;title&quot;&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Hello&nbsp;World&nbsp;&nbsp;&nbsp;&nbsp;&lt;/h1&gt;&nbsp;&nbsp;);};</pre></blockquote><p>运行这个示例。</p><blockquote><pre class=" language-bash">$&nbsp;npm&nbsp;run&nbsp;demo02</pre></blockquote><p>打开 http://localhost:8080，应该会<a href="http://ruanyf.github.io/css-modules-demos/demo02/" target="_blank">看到</a><code>h1</code>标题显示为绿色。</p><p>CSS Modules 还提供一种显式的局部作用域语法<code>:local(.className)</code>，等同于<code>.className</code>，所以上面的<code>App.css</code>也可以写成下面这样。</p><blockquote><pre class=" language-css">:local(.title)&nbsp;{&nbsp;&nbsp;color:&nbsp;red;}:global(.title)&nbsp;{&nbsp;&nbsp;color:&nbsp;green;}</pre></blockquote><h2>三、定制哈希类名</h2><p><code>css-loader</code>默认的哈希算法是<code>[hash:base64]</code>，这会将<code>.title</code>编译成<code>._3zyde4l1yATCOkgn-DBWEL</code>这样的字符串。</p><p><a href="https://github.com/ruanyf/css-modules-demos/blob/master/demo03/webpack.config.js" target="_blank"><code>webpack.config.js</code></a>里面可以定制哈希字符串的格式。</p><blockquote><pre class=" language-javascript">module:&nbsp;{\n&nbsp;&nbsp;loaders:&nbsp;[&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;...&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;test:&nbsp;/.css$/,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;loader:&nbsp;&quot;style-loader!css-loader?modules&amp;localIdentName=[path][name]---[local]---[hash:base64:5]&quot;&nbsp;&nbsp;&nbsp;&nbsp;},&nbsp;&nbsp;]}</pre></blockquote><p>运行这个示例。</p><blockquote><pre class=" language-bash">$&nbsp;npm&nbsp;run&nbsp;demo03</pre></blockquote><p>你会<a href="http://ruanyf.github.io/css-modules-demos/demo03/" target="_blank">发现</a><code>.title</code>被编译成了<code>demo03-components-App---title---GpMto</code>。</p><h2>四、 Class 的组合</h2><p>在 CSS Modules 中，一个选择器可以继承另一个选择器的规则，这称为&quot;组合&quot;（<a href="https://github.com/css-modules/css-modules#composition" target="_blank">&quot;composition&quot;</a>）。</p><p>在<a href="https://github.com/ruanyf/css-modules-demos/blob/master/demo04/components/App.css" target="_blank"><code>App.css</code></a>中，让<code>.title</code>继承<code>.className</code> 。</p><blockquote><pre class=" language-css">.className&nbsp;{&nbsp;&nbsp;background-color:&nbsp;blue;}.title&nbsp;{&nbsp;&nbsp;composes:&nbsp;className;&nbsp;&nbsp;color:&nbsp;red;}</pre></blockquote><p><a href="https://github.com/ruanyf/css-modules-demos/blob/master/demo04/components/App.js" target="_blank"><code>App.js</code></a>不用修改。</p><blockquote><pre class=" language-javascript">import&nbsp;React&nbsp;from&nbsp;&#39;react&#39;;import&nbsp;style&nbsp;from&nbsp;&#39;./App.css&#39;;export&nbsp;default&nbsp;()&nbsp;=&gt;&nbsp;{&nbsp;&nbsp;return&nbsp;(&nbsp;&nbsp;&nbsp;&nbsp;&lt;h1&nbsp;className={style.title}&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Hello&nbsp;World&nbsp;&nbsp;&nbsp;&nbsp;&lt;/h1&gt;&nbsp;&nbsp;);};</pre></blockquote><p>运行这个示例。</p><blockquote><pre class=" language-bash">$&nbsp;npm&nbsp;run&nbsp;demo04</pre></blockquote><p>打开<code>http://localhost:8080</code>，会<a href="http://ruanyf.github.io/css-modules-demos/demo04/" target="_blank">看到</a>红色的<code>h1</code>在蓝色的背景上。</p><p><code>App.css</code>编译成下面的代码。</p><blockquote><pre class=" language-css">._2DHwuiHWMnKTOYG45T0x34&nbsp;{&nbsp;&nbsp;color:&nbsp;red;}._10B-buq6_BEOTOl9urIjf8&nbsp;{&nbsp;&nbsp;background-color:&nbsp;blue;}</pre></blockquote><p>相应地， <code>h1</code>的<code>class</code>也会编译成<code>&lt;h1 class=&quot;_2DHwuiHWMnKTOYG45T0x34 _10B-buq6_BEOTOl9urIjf8&quot;&gt;</code>。</p><h2>五、输入其他模块</h2><p>选择器也可以继承其他CSS文件里面的规则。</p><p><a href="https://github.com/ruanyf/css-modules-demos/blob/master/demo05/components/another.css" target="_blank"><code>another.css</code></a></p><blockquote><pre class=" language-css">.className&nbsp;{&nbsp;&nbsp;background-color:&nbsp;blue;}</pre></blockquote><p><a href="https://github.com/ruanyf/css-modules-demos/blob/master/demo05/components/App.css" target="_blank"><code>App.css</code></a>可以继承<code>another.css</code>里面的规则。</p><blockquote><pre class=" language-css">.title&nbsp;{&nbsp;&nbsp;composes:&nbsp;className&nbsp;from&nbsp;&#39;./another.css&#39;;&nbsp;&nbsp;color:&nbsp;red;}</pre></blockquote><p>运行这个示例。</p><blockquote><pre class=" language-bash">$&nbsp;npm&nbsp;run&nbsp;demo05</pre></blockquote><p>打开<code>http://localhost:8080</code>，会<a href="http://ruanyf.github.io/css-modules-demos/demo05/" target="_blank">看到</a>蓝色的背景上有一个红色的<code>h1</code>。</p><h2>六、输入变量</h2><p>CSS Modules 支持使用变量，不过需要安装 PostCSS 和 <a href="https://github.com/css-modules/postcss-modules-values" target="_blank">postcss-modules-values</a>。</p><blockquote><pre class=" language-bash">$&nbsp;npm&nbsp;install&nbsp;--save&nbsp;postcss-loader&nbsp;postcss-modules-values</pre></blockquote><p>把<code>postcss-loader</code>加入<a href="https://github.com/ruanyf/css-modules-demos/blob/master/demo06/webpack.config.js" target="_blank"><code>webpack.config.js</code></a>。</p><blockquote><pre class=" language-javascript">var&nbsp;values&nbsp;=&nbsp;require(&#39;postcss-modules-values&#39;);module.exports&nbsp;=&nbsp;{\n&nbsp;&nbsp;entry:&nbsp;__dirname&nbsp;+&nbsp;&#39;/index.js&#39;,\n&nbsp;&nbsp;output:&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;publicPath:&nbsp;&#39;/&#39;,\n&nbsp;&nbsp;&nbsp;&nbsp;filename:&nbsp;&#39;./bundle.js&#39;&nbsp;&nbsp;},\n&nbsp;&nbsp;module:&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;loaders:&nbsp;[&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;test:&nbsp;/.jsx?$/,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;exclude:&nbsp;/node_modules/,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;loader:&nbsp;&#39;babel&#39;,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;query:&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;presets:&nbsp;[&#39;es2015&#39;,&nbsp;&#39;stage-0&#39;,&nbsp;&#39;react&#39;]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;test:&nbsp;/.css$/,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;loader:&nbsp;&quot;style-loader!css-loader?modules!postcss-loader&quot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},&nbsp;&nbsp;&nbsp;&nbsp;]&nbsp;&nbsp;},\n&nbsp;&nbsp;postcss:&nbsp;[\n&nbsp;&nbsp;&nbsp;&nbsp;values&nbsp;&nbsp;]};</pre></blockquote><p>接着，在<a href="https://github.com/ruanyf/css-modules-demos/blob/master/demo06/components/colors.css" target="_blank"><code>colors.css</code></a>里面定义变量。</p><blockquote><pre class=" language-css">@value&nbsp;blue:&nbsp;#0c77f8;@value&nbsp;red:&nbsp;#ff0000;@value&nbsp;green:&nbsp;#aaf200;</pre></blockquote><p><a href="https://github.com/ruanyf/css-modules-demos/tree/master/demo06/components" target="_blank"><code>App.css</code></a>可以引用这些变量。</p><blockquote><pre class=" language-css">@value&nbsp;colors:&nbsp;&quot;./colors.css&quot;;@value&nbsp;blue,&nbsp;red,&nbsp;green&nbsp;from&nbsp;colors;.title&nbsp;{&nbsp;&nbsp;color:&nbsp;red;&nbsp;&nbsp;background-color:&nbsp;blue;}</pre></blockquote><p>运行这个示例。</p><blockquote><pre class=" language-bash">$&nbsp;npm&nbsp;run&nbsp;demo06</pre></blockquote><p>打开<code>http://localhost:8080</code>，会<a href="http://ruanyf.github.io/css-modules-demos/demo06/" target="_blank">看到</a>蓝色的背景上有一个红色的<code>h1</code>。</p><p>（完）</p><p><!-- /div --></p>', '2018-01-11', 'admin', 0, 13, '0', 'IT', 4460);

-- --------------------------------------------------------

--
-- 表的结构 `comment`
--

CREATE TABLE `comment` (
  `id` int(11) NOT NULL,
  `article_id` int(11) NOT NULL,
  `content` varchar(255) NOT NULL,
  `author` varchar(255) NOT NULL,
  `author_avator` varchar(255) DEFAULT NULL,
  `time` datetime NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

--
-- 转存表中的数据 `comment`
--

INSERT INTO `comment` (`id`, `article_id`, `content`, `author`, `author_avator`, `time`) VALUES
(4, 2, '1111', 'huahua', 'http://i.jd.com/commons/img/no-img_mid_.jpg', '2017-12-26 14:44:10'),
(5, 2, '2222', 'huahua', 'http://i.jd.com/commons/img/no-img_mid_.jpg', '2017-12-26 15:11:10'),
(8, 3, '很不错', '贺鹏桦', 'http://i.jd.com/commons/img/no-img_mid_.jpg', '2017-12-26 19:09:15'),
(9, 5, '其实我是真的很喜欢你', 'huahua', 'http://localhost/image/img2.jpg', '2018-01-09 13:24:27');

-- --------------------------------------------------------

--
-- 表的结构 `fans`
--

CREATE TABLE `fans` (
  `id` int(11) NOT NULL,
  `userId` int(11) NOT NULL,
  `fansId` int(11) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

--
-- 转存表中的数据 `fans`
--

INSERT INTO `fans` (`id`, `userId`, `fansId`) VALUES
(1, 29, 30),
(2, 28, 30);

-- --------------------------------------------------------

--
-- 表的结构 `likes`
--

CREATE TABLE `likes` (
  `id` int(11) NOT NULL,
  `userId` int(11) NOT NULL,
  `likesId` int(11) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

--
-- 转存表中的数据 `likes`
--

INSERT INTO `likes` (`id`, `userId`, `likesId`) VALUES
(1, 30, 29),
(2, 30, 28);

-- --------------------------------------------------------

--
-- 表的结构 `likesofarticle`
--

CREATE TABLE `likesofarticle` (
  `id` int(11) NOT NULL,
  `article_id` int(11) NOT NULL,
  `author_id` int(11) NOT NULL,
  `author_name` varchar(255) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

--
-- 转存表中的数据 `likesofarticle`
--

INSERT INTO `likesofarticle` (`id`, `article_id`, `author_id`, `author_name`) VALUES
(18, 3, 28, '%E8%B4%BA%E9%B9%8F%E6%A1%A6'),
(19, 5, 29, 'huahua');

-- --------------------------------------------------------

--
-- 表的结构 `user`
--

CREATE TABLE `user` (
  `name` varchar(255) NOT NULL,
  `password` varchar(255) NOT NULL,
  `mobile` varchar(255) NOT NULL,
  `sex` int(1) NOT NULL,
  `mail` varchar(255) NOT NULL,
  `avator` varchar(255) NOT NULL DEFAULT 'http://i.jd.com/commons/img/no-img_mid_.jpg',
  `fans` varchar(255) NOT NULL DEFAULT '0',
  `id` int(11) NOT NULL,
  `likes` varchar(255) DEFAULT '0',
  `description` longtext NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

--
-- 转存表中的数据 `user`
--

INSERT INTO `user` (`name`, `password`, `mobile`, `sex`, `mail`, `avator`, `fans`, `id`, `likes`, `description`) VALUES
('admin', '1q2w3e4r5t', '17601017292', 0, '13080467292@163.com', 'http://localhost/image/img1.jpg', '0', 30, '0', '软件工程专业毕业，喜欢编程，运动，以及冒险，大学做过一些门户类网站。现投身互联网行业，目前工作于yonyou。喜欢互联网，喜欢健身，喜欢跑步，喜欢交朋友，喜欢笑起来像旺仔一样可爱的女生，喜欢认识更多有意思的人，欢迎和这个有全身充满正能量（捂脸）的处女座男生做朋友。'),
('huahua', '111111', '13080467291', 0, '13080467211@163.com', 'http://localhost/image/img2.jpg', '0', 29, '0', '一句话介绍你自己。。。'),
('zackon', '1q2w3e4r5t', '13080467292', 0, 'zhangtaos@yonyou.com', 'http://localhost/image/avatar.jpg', '0', 28, '0', '一句话介绍你自己。。。');

--
-- Indexes for dumped tables
--

--
-- Indexes for table `article`
--
ALTER TABLE `article`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `comment`
--
ALTER TABLE `comment`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `fans`
--
ALTER TABLE `fans`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `likes`
--
ALTER TABLE `likes`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `likesofarticle`
--
ALTER TABLE `likesofarticle`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `user`
--
ALTER TABLE `user`
  ADD UNIQUE KEY `name` (`name`),
  ADD UNIQUE KEY `mobile` (`mobile`),
  ADD UNIQUE KEY `id` (`id`);

--
-- 在导出的表使用AUTO_INCREMENT
--

--
-- 使用表AUTO_INCREMENT `article`
--
ALTER TABLE `article`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=11;
--
-- 使用表AUTO_INCREMENT `comment`
--
ALTER TABLE `comment`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=10;
--
-- 使用表AUTO_INCREMENT `fans`
--
ALTER TABLE `fans`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=81;
--
-- 使用表AUTO_INCREMENT `likes`
--
ALTER TABLE `likes`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=81;
--
-- 使用表AUTO_INCREMENT `likesofarticle`
--
ALTER TABLE `likesofarticle`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=20;
--
-- 使用表AUTO_INCREMENT `user`
--
ALTER TABLE `user`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=31;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
